syntax = "proto3";
package gauss.token;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "gauss/token/token.proto";

option go_package = "github.com/gauss/gauss/v4/x/token/types";

// Query creates service with token as RPC
service Query {
    // Params queries the token parameters
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http).get = "/gauss/token/params";
    }
    // Tokens returns the token list
    rpc Tokens(QueryTokensRequest) returns (QueryTokensResponse) {
        option (google.api.http).get = "/gauss/token/tokens";
    }
    // Token returns token with token name
    rpc Token(QueryTokenRequest) returns (QueryTokenResponse) {
        option (google.api.http).get = "/gauss/token/tokens/{symbol}";
    }
    // Fees returns the fees to issue or mint a token
    rpc Fees(QueryFeesRequest) returns (QueryFeesResponse) {
        option (google.api.http).get = "/gauss/token/tokens/{symbol}/fees"; 
    }
    // BurntToken queries the burnt coins
    rpc Burntoken(QueryBurntokenRequest) returns (QueryBurntokenResponse) {
        option (google.api.http).get = "/gauss/token/{symbol}/burnt";
    }
    
}

// QueryParametersRequest is request type for the Query/Parameters RPC method
message QueryParamsRequest {}

// QueryParametersResponse is response type for the Query/Parameters RPC method
message QueryParamsResponse {
    Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryTokensRequest is request type for the Query/Tokens RPC method
message QueryTokensRequest {
    string owner = 1;
    // pagination defines an optional pagination for the request.
    cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryTokensResponse is response type for the Query/Tokens RPC method
message QueryTokensResponse {
    repeated google.protobuf.Any Tokens = 1
        [ (cosmos_proto.accepts_interface) = "ContentI" ];

    cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
// QueryTokenRequest is request type for the Query/Token RPC method
message QueryTokenRequest {
    string symbol = 1;
}

// QueryTokenResponse is response type for the Query/Token RPC method
message QueryTokenResponse {
    google.protobuf.Any Token = 1
        [ (cosmos_proto.accepts_interface) = "ContentI" ];
    bool unlocked = 2;
}

// QueryFeesRequest is request type for the Query/Token RPC method
message QueryFeesRequest {
    string symbol = 1;
}

// QueryFeesResponse is response type for the Query/Fees RPC method
message QueryFeesResponse {
    bool exist = 1;
    cosmos.base.v1beta1.Coin issue_fee = 2 [
        (gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"issue_fee\"",
        (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin"
    ];
    cosmos.base.v1beta1.Coin mint_fee = 3 [
        (gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"mint_fee\"",
        (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin"
    ];
}

// QueryBurntokenRequest is request type for the Query/Token RPC method
message QueryBurntokenRequest {
    string symbol = 1;
}

// QueryBurntokenResponse is response type for the Query/Tokens RPC method
message QueryBurntokenResponse {
    bool exist = 1;
    cosmos.base.v1beta1.Coin burned_coin = 2
       [ (gogoproto.nullable) = false ];
}
