// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gauss/defi/defi.proto

package types

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/regen-network/cosmos-proto"
	types "github.com/tendermint/tendermint/proto/tendermint/types"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BondStatus is the status of a defi.
type BondStatus int32

const (
	// UNSPECIFIED defines an invalid defi status.
	Unspecified BondStatus = 0
	// UNBONDED defines a defi that is not bonded.
	Unbonded BondStatus = 1
	// UNBONDING defines a defi that is unbonding.
	Unbonding BondStatus = 2
	// BONDED defines a defi that is bonded.
	Bonded BondStatus = 3
)

var BondStatus_name = map[int32]string{
	0: "BOND_STATUS_UNSPECIFIED",
	1: "BOND_STATUS_UNBONDED",
	2: "BOND_STATUS_UNBONDING",
	3: "BOND_STATUS_BONDED",
}

var BondStatus_value = map[string]int32{
	"BOND_STATUS_UNSPECIFIED": 0,
	"BOND_STATUS_UNBONDED":    1,
	"BOND_STATUS_UNBONDING":   2,
	"BOND_STATUS_BONDED":      3,
}

func (x BondStatus) String() string {
	return proto.EnumName(BondStatus_name, int32(x))
}

func (BondStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{0}
}

// HistoricalInfo contains header and defi information for a given block.
// It is stored as part of defi module's state, which persists the `n` most
// recent HistoricalInfo
// (`n` is set by the defi module's `historical_entries` parameter).
type HistoricalInfo struct {
	Header  types.Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header"`
	Defiset []Defi       `protobuf:"bytes,2,rep,name=defiset,proto3" json:"defiset"`
}

func (m *HistoricalInfo) Reset()         { *m = HistoricalInfo{} }
func (m *HistoricalInfo) String() string { return proto.CompactTextString(m) }
func (*HistoricalInfo) ProtoMessage()    {}
func (*HistoricalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{0}
}
func (m *HistoricalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalInfo.Merge(m, src)
}
func (m *HistoricalInfo) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalInfo proto.InternalMessageInfo

func (m *HistoricalInfo) GetHeader() types.Header {
	if m != nil {
		return m.Header
	}
	return types.Header{}
}

func (m *HistoricalInfo) GetDefiset() []Defi {
	if m != nil {
		return m.Defiset
	}
	return nil
}

// Description defines a defi description.
type Description struct {
	// moniker defines a human-readable name for the defi.
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// identity defines an optional identity signature (ex. UPort or Keybase).
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	// website defines an optional website link.
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	// security_contact defines an optional email for security contact.
	SecurityContact string `protobuf:"bytes,4,opt,name=security_contact,json=securityContact,proto3" json:"security_contact,omitempty" yaml:"security_contact"`
	// details define other optional details.
	Details string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *Description) Reset()      { *m = Description{} }
func (*Description) ProtoMessage() {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{1}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

func (m *Description) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Description) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *Description) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Description) GetSecurityContact() string {
	if m != nil {
		return m.SecurityContact
	}
	return ""
}

func (m *Description) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

// Defi defines a defi, together with the total amount of the
// Defi's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this defi, the defi is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
type Defi struct {
	// operator_address defines the address of the defi's operator; bech encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
	// status is the defi status (bonded/unbonding/unbonded).
	Status BondStatus `protobuf:"varint,2,opt,name=status,proto3,enum=gauss.defi.BondStatus" json:"status,omitempty"`
	// tokens define the delegated tokens (incl. self-delegation).
	Tokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens"`
	// delegator_shares defines total shares issued to a defi's delegators.
	DelegatorShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=delegator_shares,json=delegatorShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"delegator_shares" yaml:"delegator_shares"`
	// description defines the description terms for the defi.
	Description Description `protobuf:"bytes,7,opt,name=description,proto3" json:"description"`
	// unbonding_height defines, if unbonding, the height at which this defi has begun unbonding.
	UnbondingHeight int64 `protobuf:"varint,8,opt,name=unbonding_height,json=unbondingHeight,proto3" json:"unbonding_height,omitempty" yaml:"unbonding_height"`
	// unbonding_time defines, if unbonding, the min time for the defi to complete unbonding.
	UnbondingTime time.Time `protobuf:"bytes,9,opt,name=unbonding_time,json=unbondingTime,proto3,stdtime" json:"unbonding_time" yaml:"unbonding_time"`
	// min_self_delegation is the defi's self declared minimum self delegation.
	MinSelfDelegation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_self_delegation" yaml:"min_self_delegation"`
}

func (m *Defi) Reset()      { *m = Defi{} }
func (*Defi) ProtoMessage() {}
func (*Defi) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{2}
}
func (m *Defi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Defi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Defi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Defi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Defi.Merge(m, src)
}
func (m *Defi) XXX_Size() int {
	return m.Size()
}
func (m *Defi) XXX_DiscardUnknown() {
	xxx_messageInfo_Defi.DiscardUnknown(m)
}

var xxx_messageInfo_Defi proto.InternalMessageInfo

// DefiAddresses defines a repeated set of defi addresses.
type DefiAddresses struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *DefiAddresses) Reset()      { *m = DefiAddresses{} }
func (*DefiAddresses) ProtoMessage() {}
func (*DefiAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{3}
}
func (m *DefiAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefiAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefiAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefiAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefiAddresses.Merge(m, src)
}
func (m *DefiAddresses) XXX_Size() int {
	return m.Size()
}
func (m *DefiAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_DefiAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_DefiAddresses proto.InternalMessageInfo

func (m *DefiAddresses) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// DDPair is struct that just has a delegator-defi pair with no other data.
// It is intended to be used as a marshalable pointer. For example, a DVPair can
// be used to construct the key to getting an UnbondingDelegation from state.
type DDPair struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	DefiAddress      string `protobuf:"bytes,2,opt,name=defi_address,json=defiAddress,proto3" json:"defi_address,omitempty" yaml:"defi_address"`
}

func (m *DDPair) Reset()      { *m = DDPair{} }
func (*DDPair) ProtoMessage() {}
func (*DDPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{4}
}
func (m *DDPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DDPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DDPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DDPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DDPair.Merge(m, src)
}
func (m *DDPair) XXX_Size() int {
	return m.Size()
}
func (m *DDPair) XXX_DiscardUnknown() {
	xxx_messageInfo_DDPair.DiscardUnknown(m)
}

var xxx_messageInfo_DDPair proto.InternalMessageInfo

// DDPairs defines an array of DDPair objects.
type DDPairs struct {
	Pairs []DDPair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs"`
}

func (m *DDPairs) Reset()         { *m = DDPairs{} }
func (m *DDPairs) String() string { return proto.CompactTextString(m) }
func (*DDPairs) ProtoMessage()    {}
func (*DDPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{5}
}
func (m *DDPairs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DDPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DDPairs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DDPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DDPairs.Merge(m, src)
}
func (m *DDPairs) XXX_Size() int {
	return m.Size()
}
func (m *DDPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_DDPairs.DiscardUnknown(m)
}

var xxx_messageInfo_DDPairs proto.InternalMessageInfo

func (m *DDPairs) GetPairs() []DDPair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

// Delegation represents the bond with tokens held by an account. It is
// owned by one delegator, and is associated with the voting power of one
// defi.
type Delegation struct {
	// delegator_address is the bech32-encoded address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	// defi_address is the bech32-encoded address of the defi.
	DefiAddress string `protobuf:"bytes,2,opt,name=defi_address,json=defiAddress,proto3" json:"defi_address,omitempty" yaml:"defi_address"`
	// shares define the delegation shares received.
	Shares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=shares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"shares"`
}

func (m *Delegation) Reset()      { *m = Delegation{} }
func (*Delegation) ProtoMessage() {}
func (*Delegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{6}
}
func (m *Delegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegation.Merge(m, src)
}
func (m *Delegation) XXX_Size() int {
	return m.Size()
}
func (m *Delegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegation.DiscardUnknown(m)
}

var xxx_messageInfo_Delegation proto.InternalMessageInfo

// UnbondingDelegation stores all of a single delegator's unbonding bonds
// for a single defi in an time-ordered list.
type UnbondingDelegation struct {
	// delegator_address is the bech32-encoded address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	// defi_address is the bech32-encoded address of the defi.
	DefiAddress string `protobuf:"bytes,2,opt,name=defi_address,json=defiAddress,proto3" json:"defi_address,omitempty" yaml:"defi_address"`
	// entries are the unbonding delegation entries.
	Entries []UnbondingDelegationEntry `protobuf:"bytes,3,rep,name=entries,proto3" json:"entries"`
}

func (m *UnbondingDelegation) Reset()      { *m = UnbondingDelegation{} }
func (*UnbondingDelegation) ProtoMessage() {}
func (*UnbondingDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{7}
}
func (m *UnbondingDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingDelegation.Merge(m, src)
}
func (m *UnbondingDelegation) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingDelegation proto.InternalMessageInfo

// UnbondingDelegationEntry defines an unbonding object with relevant metadata.
type UnbondingDelegationEntry struct {
	// creation_height is the height which the unbonding took place.
	CreationHeight int64 `protobuf:"varint,1,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty" yaml:"creation_height"`
	// completion_time is the unix time for unbonding completion.
	CompletionTime time.Time `protobuf:"bytes,2,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time" yaml:"completion_time"`
	// initial_balance defines the tokens initially scheduled to receive at completion.
	InitialBalance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=initial_balance,json=initialBalance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"initial_balance" yaml:"initial_balance"`
	// balance defines the tokens to receive at completion.
	Balance github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance"`
}

func (m *UnbondingDelegationEntry) Reset()      { *m = UnbondingDelegationEntry{} }
func (*UnbondingDelegationEntry) ProtoMessage() {}
func (*UnbondingDelegationEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{8}
}
func (m *UnbondingDelegationEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingDelegationEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingDelegationEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingDelegationEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingDelegationEntry.Merge(m, src)
}
func (m *UnbondingDelegationEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingDelegationEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingDelegationEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingDelegationEntry proto.InternalMessageInfo

func (m *UnbondingDelegationEntry) GetCreationHeight() int64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *UnbondingDelegationEntry) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

// DelegationResponse is equivalent to Delegation except that it contains a
// balance in addition to shares which is more suitable for client responses.
type DelegationResponse struct {
	Delegation Delegation  `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
	Balance    types1.Coin `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance"`
}

func (m *DelegationResponse) Reset()      { *m = DelegationResponse{} }
func (*DelegationResponse) ProtoMessage() {}
func (*DelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{9}
}
func (m *DelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationResponse.Merge(m, src)
}
func (m *DelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationResponse proto.InternalMessageInfo

func (m *DelegationResponse) GetDelegation() Delegation {
	if m != nil {
		return m.Delegation
	}
	return Delegation{}
}

func (m *DelegationResponse) GetBalance() types1.Coin {
	if m != nil {
		return m.Balance
	}
	return types1.Coin{}
}

// Params defines the parameters for the defi module.
type Params struct {
	// bond_denom defines the bondable coin denomination.
	BondDenom string `protobuf:"bytes,1,opt,name=bond_denom,json=bondDenom,proto3" json:"bond_denom,omitempty" yaml:"bond_denom"`
	// mint_inflation defines the amount coin to be minted
	MintInflation types1.Coin `protobuf:"bytes,2,opt,name=mint_inflation,json=mintInflation,proto3" json:"mint_inflation" yaml:"mint_inflation"`
	//
	CommunityTax github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=community_tax,json=communityTax,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"community_tax" yaml:"community_tax"`
	// rate is the commission rate charged to delegators, as a fraction.
	CommissionRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=commission_rate,json=commissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_rate"`
	// rate is the market rate charged to makers, as a fraction.
	MarketRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=market_rate,json=marketRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"market_rate"`
	// unbonding_time is the time duration of unbonding.
	UnbondingTime time.Duration `protobuf:"bytes,6,opt,name=unbonding_time,json=unbondingTime,proto3,stdduration" json:"unbonding_time" yaml:"unbonding_time"`
	// max_defis is the maximum number of defis.
	MaxDefis uint32 `protobuf:"varint,7,opt,name=max_defis,json=maxDefis,proto3" json:"max_defis,omitempty" yaml:"max_defis"`
	// max_entries is the max entries for unbonding delegation(per pair/trio).
	MaxEntries uint32 `protobuf:"varint,8,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty" yaml:"max_entries"`
	// historical_entries is the number of historical entries to persist.
	HistoricalEntries uint32 `protobuf:"varint,9,opt,name=historical_entries,json=historicalEntries,proto3" json:"historical_entries,omitempty" yaml:"historical_entries"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{10}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBondDenom() string {
	if m != nil {
		return m.BondDenom
	}
	return ""
}

func (m *Params) GetMintInflation() types1.Coin {
	if m != nil {
		return m.MintInflation
	}
	return types1.Coin{}
}

func (m *Params) GetUnbondingTime() time.Duration {
	if m != nil {
		return m.UnbondingTime
	}
	return 0
}

func (m *Params) GetMaxDefis() uint32 {
	if m != nil {
		return m.MaxDefis
	}
	return 0
}

func (m *Params) GetMaxEntries() uint32 {
	if m != nil {
		return m.MaxEntries
	}
	return 0
}

func (m *Params) GetHistoricalEntries() uint32 {
	if m != nil {
		return m.HistoricalEntries
	}
	return 0
}

// Pool is used for tracking bonded and not-bonded token supply of the bond
// denomination.
type Pool struct {
	NotBondedTokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=not_bonded_tokens,json=notBondedTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"not_bonded_tokens"`
	BondedTokens    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=bonded_tokens,json=bondedTokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bonded_tokens" yaml:"bonded_tokens"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{11}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

// DefiHistoricalRewards represents historical rewards for a defi.
// Height is implicit within the store key.
// Cumulative reward ratio is the sum from the zeroeth period
// until this period of rewards / tokens, per the spec.
// The reference count indicates the number of objects
// which might need to reference this historical entry at any point.
// ReferenceCount =
//    number of outstanding delegations which ended the associated period (and
//    might need to read that record)
//  + number of slashes which ended the associated period (and might need to
//  read that record)
//  + one per defi for the zeroeth period, set on initialization
type DefiHistoricalRewards struct {
	CumulativeRewardRatio github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=cumulative_reward_ratio,json=cumulativeRewardRatio,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"cumulative_reward_ratio" yaml:"cumulative_reward_ratio"`
	ReferenceCount        uint32                                      `protobuf:"varint,2,opt,name=reference_count,json=referenceCount,proto3" json:"reference_count,omitempty" yaml:"reference_count"`
}

func (m *DefiHistoricalRewards) Reset()         { *m = DefiHistoricalRewards{} }
func (m *DefiHistoricalRewards) String() string { return proto.CompactTextString(m) }
func (*DefiHistoricalRewards) ProtoMessage()    {}
func (*DefiHistoricalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{12}
}
func (m *DefiHistoricalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefiHistoricalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefiHistoricalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefiHistoricalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefiHistoricalRewards.Merge(m, src)
}
func (m *DefiHistoricalRewards) XXX_Size() int {
	return m.Size()
}
func (m *DefiHistoricalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_DefiHistoricalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_DefiHistoricalRewards proto.InternalMessageInfo

func (m *DefiHistoricalRewards) GetCumulativeRewardRatio() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.CumulativeRewardRatio
	}
	return nil
}

func (m *DefiHistoricalRewards) GetReferenceCount() uint32 {
	if m != nil {
		return m.ReferenceCount
	}
	return 0
}

// DefiCurrentRewards represents current rewards and current
// period for a defi kept as a running counter and incremented
// each block as long as the defi's tokens remain constant.
type DefiCurrentRewards struct {
	Rewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards"`
	Period  uint64                                      `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *DefiCurrentRewards) Reset()         { *m = DefiCurrentRewards{} }
func (m *DefiCurrentRewards) String() string { return proto.CompactTextString(m) }
func (*DefiCurrentRewards) ProtoMessage()    {}
func (*DefiCurrentRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{13}
}
func (m *DefiCurrentRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefiCurrentRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefiCurrentRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefiCurrentRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefiCurrentRewards.Merge(m, src)
}
func (m *DefiCurrentRewards) XXX_Size() int {
	return m.Size()
}
func (m *DefiCurrentRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_DefiCurrentRewards.DiscardUnknown(m)
}

var xxx_messageInfo_DefiCurrentRewards proto.InternalMessageInfo

func (m *DefiCurrentRewards) GetRewards() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *DefiCurrentRewards) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

// DefiOutstandingRewards represents outstanding (un-withdrawn) rewards
// for a defi inexpensive to track, allows simple sanity checks.
type DefiOutstandingRewards struct {
	Rewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"rewards" yaml:"rewards"`
}

func (m *DefiOutstandingRewards) Reset()         { *m = DefiOutstandingRewards{} }
func (m *DefiOutstandingRewards) String() string { return proto.CompactTextString(m) }
func (*DefiOutstandingRewards) ProtoMessage()    {}
func (*DefiOutstandingRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{14}
}
func (m *DefiOutstandingRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefiOutstandingRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefiOutstandingRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefiOutstandingRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefiOutstandingRewards.Merge(m, src)
}
func (m *DefiOutstandingRewards) XXX_Size() int {
	return m.Size()
}
func (m *DefiOutstandingRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_DefiOutstandingRewards.DiscardUnknown(m)
}

var xxx_messageInfo_DefiOutstandingRewards proto.InternalMessageInfo

func (m *DefiOutstandingRewards) GetRewards() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

// DefiAccumulatedCommission represents accumulated commission
// for a defi kept as a running counter, can be withdrawn at any time.
type DefiAccumulatedCommission struct {
	Commission github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=commission,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"commission"`
}

func (m *DefiAccumulatedCommission) Reset()         { *m = DefiAccumulatedCommission{} }
func (m *DefiAccumulatedCommission) String() string { return proto.CompactTextString(m) }
func (*DefiAccumulatedCommission) ProtoMessage()    {}
func (*DefiAccumulatedCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{15}
}
func (m *DefiAccumulatedCommission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefiAccumulatedCommission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefiAccumulatedCommission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefiAccumulatedCommission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefiAccumulatedCommission.Merge(m, src)
}
func (m *DefiAccumulatedCommission) XXX_Size() int {
	return m.Size()
}
func (m *DefiAccumulatedCommission) XXX_DiscardUnknown() {
	xxx_messageInfo_DefiAccumulatedCommission.DiscardUnknown(m)
}

var xxx_messageInfo_DefiAccumulatedCommission proto.InternalMessageInfo

func (m *DefiAccumulatedCommission) GetCommission() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Commission
	}
	return nil
}

// DelegatorStartingInfo represents the starting info for a delegator reward
// period. It tracks the previous defi period, the delegation's amount of
// staking token, and the creation height)
type DelegatorStartingInfo struct {
	PreviousPeriod uint64                                 `protobuf:"varint,1,opt,name=previous_period,json=previousPeriod,proto3" json:"previous_period,omitempty" yaml:"previous_period"`
	Stake          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=stake,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stake" yaml:"stake"`
	Height         uint64                                 `protobuf:"varint,3,opt,name=height,proto3" json:"creation_height" yaml:"creation_height"`
}

func (m *DelegatorStartingInfo) Reset()         { *m = DelegatorStartingInfo{} }
func (m *DelegatorStartingInfo) String() string { return proto.CompactTextString(m) }
func (*DelegatorStartingInfo) ProtoMessage()    {}
func (*DelegatorStartingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{16}
}
func (m *DelegatorStartingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorStartingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorStartingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorStartingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorStartingInfo.Merge(m, src)
}
func (m *DelegatorStartingInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorStartingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorStartingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorStartingInfo proto.InternalMessageInfo

func (m *DelegatorStartingInfo) GetPreviousPeriod() uint64 {
	if m != nil {
		return m.PreviousPeriod
	}
	return 0
}

func (m *DelegatorStartingInfo) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// DelegationDelegatorReward represents the properties
// of a delegator's delegation reward.
type DelegationDelegatorReward struct {
	DefiAddress string                                      `protobuf:"bytes,1,opt,name=defi_address,json=defiAddress,proto3" json:"defi_address,omitempty" yaml:"defi_address"`
	Reward      github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"reward"`
}

func (m *DelegationDelegatorReward) Reset()         { *m = DelegationDelegatorReward{} }
func (m *DelegationDelegatorReward) String() string { return proto.CompactTextString(m) }
func (*DelegationDelegatorReward) ProtoMessage()    {}
func (*DelegationDelegatorReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{17}
}
func (m *DelegationDelegatorReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationDelegatorReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationDelegatorReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationDelegatorReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationDelegatorReward.Merge(m, src)
}
func (m *DelegationDelegatorReward) XXX_Size() int {
	return m.Size()
}
func (m *DelegationDelegatorReward) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationDelegatorReward.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationDelegatorReward proto.InternalMessageInfo

// FeePool is the global fee pool for defi.
type FeePool struct {
	CommunityPool github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=community_pool,json=communityPool,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"community_pool" yaml:"community_pool"`
}

func (m *FeePool) Reset()         { *m = FeePool{} }
func (m *FeePool) String() string { return proto.CompactTextString(m) }
func (*FeePool) ProtoMessage()    {}
func (*FeePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_e68f0e8642f790a9, []int{18}
}
func (m *FeePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeePool.Merge(m, src)
}
func (m *FeePool) XXX_Size() int {
	return m.Size()
}
func (m *FeePool) XXX_DiscardUnknown() {
	xxx_messageInfo_FeePool.DiscardUnknown(m)
}

var xxx_messageInfo_FeePool proto.InternalMessageInfo

func (m *FeePool) GetCommunityPool() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.CommunityPool
	}
	return nil
}

func init() {
	proto.RegisterEnum("gauss.defi.BondStatus", BondStatus_name, BondStatus_value)
	proto.RegisterType((*HistoricalInfo)(nil), "gauss.defi.HistoricalInfo")
	proto.RegisterType((*Description)(nil), "gauss.defi.Description")
	proto.RegisterType((*Defi)(nil), "gauss.defi.Defi")
	proto.RegisterType((*DefiAddresses)(nil), "gauss.defi.DefiAddresses")
	proto.RegisterType((*DDPair)(nil), "gauss.defi.DDPair")
	proto.RegisterType((*DDPairs)(nil), "gauss.defi.DDPairs")
	proto.RegisterType((*Delegation)(nil), "gauss.defi.Delegation")
	proto.RegisterType((*UnbondingDelegation)(nil), "gauss.defi.UnbondingDelegation")
	proto.RegisterType((*UnbondingDelegationEntry)(nil), "gauss.defi.UnbondingDelegationEntry")
	proto.RegisterType((*DelegationResponse)(nil), "gauss.defi.DelegationResponse")
	proto.RegisterType((*Params)(nil), "gauss.defi.Params")
	proto.RegisterType((*Pool)(nil), "gauss.defi.Pool")
	proto.RegisterType((*DefiHistoricalRewards)(nil), "gauss.defi.DefiHistoricalRewards")
	proto.RegisterType((*DefiCurrentRewards)(nil), "gauss.defi.DefiCurrentRewards")
	proto.RegisterType((*DefiOutstandingRewards)(nil), "gauss.defi.DefiOutstandingRewards")
	proto.RegisterType((*DefiAccumulatedCommission)(nil), "gauss.defi.DefiAccumulatedCommission")
	proto.RegisterType((*DelegatorStartingInfo)(nil), "gauss.defi.DelegatorStartingInfo")
	proto.RegisterType((*DelegationDelegatorReward)(nil), "gauss.defi.DelegationDelegatorReward")
	proto.RegisterType((*FeePool)(nil), "gauss.defi.FeePool")
}

func init() { proto.RegisterFile("gauss/defi/defi.proto", fileDescriptor_e68f0e8642f790a9) }

var fileDescriptor_e68f0e8642f790a9 = []byte{
	// 1801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcb, 0x6f, 0x23, 0x49,
	0x19, 0x77, 0xe7, 0xe1, 0x24, 0x95, 0xc4, 0x4e, 0x6a, 0x26, 0x89, 0xc7, 0xcc, 0xba, 0x4d, 0x09,
	0xad, 0x22, 0x60, 0x6d, 0x66, 0x76, 0xc5, 0x6a, 0x23, 0x04, 0xac, 0xed, 0x84, 0x44, 0x1a, 0xcd,
	0x44, 0x9d, 0x44, 0x2b, 0x71, 0x69, 0x95, 0xbb, 0xcb, 0x4e, 0x29, 0xee, 0x2e, 0x6f, 0x57, 0x79,
	0x36, 0x41, 0x8b, 0xc4, 0x71, 0x95, 0x03, 0x2c, 0x27, 0x96, 0x43, 0xa4, 0x91, 0xb8, 0xc1, 0x1d,
	0xfe, 0x85, 0x45, 0xe2, 0xb0, 0x47, 0x84, 0x90, 0x07, 0xcd, 0x5c, 0x60, 0x4f, 0x2b, 0xdf, 0x38,
	0x81, 0xea, 0xd1, 0xdd, 0x76, 0x27, 0x30, 0xe3, 0x91, 0x56, 0x9a, 0x4b, 0xe2, 0xfa, 0xea, 0x7b,
	0xd7, 0xef, 0x7b, 0xd8, 0x60, 0xa3, 0x8b, 0x07, 0x9c, 0xd7, 0x7d, 0xd2, 0xa1, 0xea, 0x4f, 0xad,
	0x1f, 0x31, 0xc1, 0x20, 0x50, 0xe4, 0x9a, 0xa4, 0x94, 0x6f, 0x77, 0x59, 0x97, 0x29, 0x72, 0x5d,
	0x7e, 0xd2, 0x1c, 0xe5, 0x3b, 0x5d, 0xc6, 0xba, 0x3d, 0x52, 0x57, 0xa7, 0xf6, 0xa0, 0x53, 0xc7,
	0xe1, 0x85, 0xb9, 0xaa, 0x64, 0xaf, 0xfc, 0x41, 0x84, 0x05, 0x65, 0xa1, 0xb9, 0xb7, 0xb3, 0xf7,
	0x82, 0x06, 0x84, 0x0b, 0x1c, 0xf4, 0x63, 0xdd, 0x1e, 0xe3, 0x01, 0xe3, 0xae, 0x36, 0xaa, 0x0f,
	0xb1, 0x6e, 0x7d, 0xaa, 0xb7, 0x31, 0x27, 0xf5, 0xc7, 0xf7, 0xda, 0x44, 0xe0, 0x7b, 0x75, 0x8f,
	0xd1, 0x58, 0xf7, 0x5d, 0x41, 0x42, 0x9f, 0x44, 0x01, 0x0d, 0x45, 0x5d, 0x5c, 0xf4, 0x09, 0xd7,
	0x7f, 0xf5, 0x2d, 0xfa, 0x19, 0x28, 0xec, 0x53, 0x2e, 0x58, 0x44, 0x3d, 0xdc, 0x3b, 0x08, 0x3b,
	0x0c, 0x7e, 0x1f, 0xe4, 0x4f, 0x09, 0xf6, 0x49, 0x54, 0xb2, 0xaa, 0xd6, 0xf6, 0xf2, 0xfd, 0x52,
	0x2d, 0x55, 0x50, 0xd3, 0xa2, 0xfb, 0xea, 0xbe, 0x31, 0xf7, 0xf9, 0xd0, 0xce, 0x39, 0x86, 0x1b,
	0x7e, 0x0f, 0x2c, 0xc8, 0xe4, 0x70, 0x22, 0x4a, 0x33, 0xd5, 0xd9, 0xed, 0xe5, 0xfb, 0x6b, 0xb5,
	0x34, 0x65, 0xb5, 0x16, 0xe9, 0x50, 0x23, 0x10, 0xb3, 0xa1, 0x3f, 0x5b, 0x60, 0xb9, 0x45, 0xb8,
	0x17, 0xd1, 0xbe, 0xcc, 0x05, 0x2c, 0x81, 0x85, 0x80, 0x85, 0xf4, 0xcc, 0x98, 0x5e, 0x72, 0xe2,
	0x23, 0x2c, 0x83, 0x45, 0xea, 0x93, 0x50, 0x50, 0x71, 0x51, 0x9a, 0x51, 0x57, 0xc9, 0x59, 0x4a,
	0x7d, 0x44, 0xda, 0x9c, 0x0a, 0x52, 0x9a, 0xd5, 0x52, 0xe6, 0x08, 0xf7, 0xc0, 0x1a, 0x27, 0xde,
	0x20, 0xa2, 0xe2, 0xc2, 0xf5, 0x58, 0x28, 0xb0, 0x27, 0x4a, 0x73, 0x92, 0xa5, 0xf1, 0x8d, 0xd1,
	0xd0, 0xde, 0xba, 0xc0, 0x41, 0x6f, 0x07, 0x65, 0x39, 0x90, 0x53, 0x8c, 0x49, 0x4d, 0x4d, 0x91,
	0x16, 0x7c, 0x22, 0x30, 0xed, 0xf1, 0xd2, 0xbc, 0xb6, 0x60, 0x8e, 0x3b, 0x8b, 0x9f, 0x3d, 0xb1,
	0x73, 0xff, 0x7c, 0x62, 0x5b, 0xe8, 0x4f, 0xf3, 0x60, 0x4e, 0xc6, 0x28, 0x8d, 0xb2, 0x3e, 0x89,
	0xb0, 0x60, 0x91, 0x8b, 0x7d, 0x3f, 0x22, 0x9c, 0xeb, 0x68, 0xc6, 0x8d, 0x66, 0x39, 0x90, 0x53,
	0x8c, 0x49, 0xef, 0x6b, 0x0a, 0xac, 0x81, 0x3c, 0x17, 0x58, 0x0c, 0xb8, 0x0a, 0xb8, 0x70, 0x7f,
	0x73, 0x3c, 0x9b, 0x0d, 0x16, 0xfa, 0x47, 0xea, 0xd6, 0x31, 0x5c, 0x70, 0x0f, 0xe4, 0x05, 0x3b,
	0x23, 0x21, 0xd7, 0x59, 0x68, 0xd4, 0x64, 0xae, 0xff, 0x36, 0xb4, 0xdf, 0xec, 0x52, 0x71, 0x3a,
	0x68, 0xd7, 0x3c, 0x16, 0x18, 0xdc, 0x98, 0x7f, 0x6f, 0x71, 0xff, 0xcc, 0x40, 0xe1, 0x20, 0x14,
	0x8e, 0x91, 0x86, 0x02, 0xac, 0xf9, 0xa4, 0x47, 0xba, 0xca, 0x3d, 0x7e, 0x8a, 0x23, 0xc2, 0x4d,
	0xd2, 0x0e, 0xa6, 0xd0, 0xd8, 0x22, 0x5e, 0x1a, 0x6d, 0x56, 0x1f, 0x72, 0x8a, 0x09, 0xe9, 0x48,
	0x51, 0xe0, 0x8f, 0xc0, 0xb2, 0x9f, 0x22, 0xa1, 0xb4, 0xa0, 0x90, 0xb7, 0x35, 0x09, 0xa0, 0xe4,
	0xda, 0xe0, 0x68, 0x5c, 0x42, 0xa6, 0x7d, 0x10, 0xb6, 0x59, 0xe8, 0xd3, 0xb0, 0xeb, 0x9e, 0x12,
	0xda, 0x3d, 0x15, 0xa5, 0xc5, 0xaa, 0xb5, 0x3d, 0x3b, 0x9e, 0xf6, 0x2c, 0x07, 0x72, 0x8a, 0x09,
	0x69, 0x5f, 0x51, 0xa0, 0x0f, 0x0a, 0x29, 0x97, 0xac, 0xc2, 0xd2, 0x92, 0xf2, 0xa5, 0x5c, 0xd3,
	0x25, 0x5a, 0x8b, 0x4b, 0xb4, 0x76, 0x1c, 0x97, 0x68, 0xe3, 0x9b, 0xd2, 0x9d, 0xd1, 0xd0, 0xde,
	0xc8, 0x5a, 0x91, 0xf2, 0xe8, 0xd3, 0xa7, 0xb6, 0xe5, 0xac, 0x26, 0x44, 0x29, 0x06, 0x3f, 0x06,
	0xb7, 0x02, 0x1a, 0xba, 0x9c, 0xf4, 0x3a, 0xae, 0x49, 0x85, 0x0c, 0x7b, 0x59, 0xe5, 0xf9, 0xc1,
	0x74, 0x2f, 0x37, 0x1a, 0xda, 0x65, 0x6d, 0xf8, 0x06, 0x95, 0xc8, 0x59, 0x0f, 0x68, 0x78, 0x44,
	0x7a, 0x9d, 0x56, 0x42, 0xdb, 0x59, 0xf9, 0xe4, 0x89, 0x9d, 0x33, 0xc8, 0xcd, 0xa1, 0x77, 0xc1,
	0xaa, 0x04, 0xae, 0xc1, 0x1d, 0xe1, 0xf0, 0x2e, 0x58, 0xc2, 0xf1, 0xa1, 0x64, 0x55, 0x67, 0xb7,
	0x97, 0x9c, 0x94, 0xa0, 0x21, 0xff, 0x8b, 0xbf, 0x57, 0x2d, 0x74, 0x65, 0x81, 0x7c, 0xab, 0x75,
	0x88, 0x69, 0x04, 0x0f, 0xc0, 0x7a, 0xfa, 0xc8, 0x93, 0xa8, 0xbf, 0x3b, 0x1a, 0xda, 0xa5, 0x2c,
	0x0e, 0x12, 0xd8, 0xa7, 0x58, 0x8b, 0x71, 0xbf, 0x03, 0x56, 0xe4, 0x7b, 0x27, 0x5a, 0x54, 0xb9,
	0x37, 0xb6, 0x46, 0x43, 0xfb, 0x56, 0xac, 0x25, 0xbd, 0x45, 0x12, 0x04, 0x89, 0xef, 0x99, 0xc0,
	0xde, 0x03, 0x0b, 0xda, 0x3d, 0x59, 0x4c, 0xf3, 0x7d, 0xf9, 0x41, 0x85, 0xb3, 0x7c, 0x1f, 0x4e,
	0x00, 0x4b, 0xf1, 0x18, 0x4c, 0x69, 0x36, 0xf4, 0x2f, 0x0b, 0x80, 0x34, 0x61, 0xaf, 0x49, 0x78,
	0xb2, 0xc4, 0x4d, 0x41, 0x4e, 0x5f, 0xe2, 0x2d, 0xe2, 0x39, 0x46, 0x3a, 0x93, 0xa6, 0xaf, 0x2c,
	0x70, 0xeb, 0x24, 0x46, 0xe7, 0xeb, 0x17, 0x74, 0x0b, 0x2c, 0x90, 0x50, 0x44, 0x54, 0x45, 0x2d,
	0x1f, 0xef, 0x5b, 0xe3, 0x8f, 0x77, 0x83, 0xe3, 0xbb, 0xa1, 0x88, 0x2e, 0xe2, 0x51, 0x63, 0x44,
	0x33, 0x21, 0xff, 0x6a, 0x16, 0x94, 0xfe, 0x97, 0x24, 0x6c, 0x82, 0xa2, 0x17, 0x11, 0x45, 0x88,
	0x1b, 0x89, 0xa5, 0x1a, 0x49, 0x79, 0x34, 0xb4, 0x37, 0xb5, 0xbf, 0x19, 0x06, 0xe4, 0x14, 0x62,
	0x8a, 0x69, 0x23, 0x5d, 0x50, 0xf4, 0x58, 0xd0, 0xef, 0x11, 0xc5, 0xa5, 0xfa, 0xc8, 0xcc, 0x0b,
	0xfb, 0x08, 0x32, 0x7d, 0x24, 0x36, 0x32, 0xa9, 0x40, 0x37, 0x92, 0x42, 0x4a, 0x55, 0x9d, 0xe4,
	0x43, 0x50, 0xa4, 0x21, 0x15, 0x14, 0xf7, 0xdc, 0x36, 0xee, 0xe1, 0xd0, 0x33, 0x53, 0xb0, 0xb1,
	0x3f, 0x75, 0x17, 0x31, 0x66, 0x33, 0xea, 0x90, 0x53, 0x30, 0x94, 0x86, 0x26, 0xc0, 0x7d, 0xb0,
	0x10, 0x9b, 0x9a, 0x7b, 0xa5, 0x51, 0x13, 0x8b, 0x8f, 0x8d, 0xcf, 0xdf, 0x58, 0x00, 0xa6, 0x0f,
	0xe1, 0x10, 0xde, 0x67, 0x21, 0x27, 0xf0, 0x07, 0x00, 0x8c, 0xb5, 0x47, 0xbd, 0x8f, 0x6c, 0x4e,
	0x4e, 0x85, 0xf8, 0xd6, 0xbc, 0xf8, 0x18, 0x3f, 0x7c, 0x2f, 0x75, 0x54, 0x27, 0xff, 0x4e, 0xcd,
	0x6c, 0x4e, 0x72, 0x57, 0xaa, 0x99, 0x5d, 0xa9, 0xd6, 0x64, 0x34, 0x96, 0xbe, 0xe6, 0x59, 0x0e,
	0x3d, 0x9d, 0x07, 0xf9, 0x43, 0x1c, 0xe1, 0x80, 0xc3, 0x77, 0x00, 0x90, 0x98, 0x71, 0x7d, 0x12,
	0xb2, 0xc0, 0x94, 0xc2, 0xc6, 0x68, 0x68, 0xaf, 0xeb, 0xc4, 0xa5, 0x77, 0xc8, 0x59, 0x92, 0x87,
	0x96, 0xfc, 0x0c, 0x5d, 0x50, 0x90, 0xab, 0x93, 0x4b, 0xc3, 0x4e, 0x4f, 0xc7, 0xf1, 0x42, 0x67,
	0xde, 0x98, 0x1c, 0x28, 0x93, 0xe2, 0xc8, 0x59, 0x95, 0x84, 0x83, 0xf8, 0x0c, 0xcf, 0xc0, 0xaa,
	0xc7, 0x82, 0x60, 0x10, 0xca, 0x2d, 0x46, 0xe0, 0x73, 0x03, 0x80, 0xbd, 0xa9, 0xc7, 0xf5, 0xed,
	0x04, 0x77, 0xa9, 0x32, 0xe4, 0xac, 0x24, 0xe7, 0x63, 0x7c, 0x0e, 0x3f, 0x50, 0xc0, 0x0e, 0x28,
	0xe7, 0x12, 0x97, 0x11, 0x16, 0xaf, 0x02, 0x02, 0xd9, 0x8c, 0x0a, 0xa9, 0x1a, 0x07, 0x0b, 0x02,
	0x1f, 0x81, 0xe5, 0x00, 0x47, 0x67, 0x44, 0x68, 0xa5, 0xf3, 0xaf, 0xa4, 0x14, 0x68, 0x15, 0x4a,
	0xa1, 0x77, 0x6d, 0x92, 0xe7, 0x4d, 0xde, 0xb3, 0x15, 0xd8, 0x32, 0xcb, 0xf8, 0x0b, 0x06, 0xf9,
	0x67, 0x37, 0x0c, 0xf2, 0x7b, 0x60, 0x29, 0xc0, 0xe7, 0xae, 0xda, 0x68, 0xd5, 0xd6, 0xb2, 0xda,
	0xb8, 0x3d, 0x1a, 0xda, 0x6b, 0xe6, 0xe1, 0xe2, 0x2b, 0xe4, 0x2c, 0x06, 0xf8, 0x5c, 0x8e, 0x59,
	0x0e, 0xdf, 0x95, 0x81, 0x9e, 0xbb, 0x71, 0x53, 0x5b, 0x54, 0x42, 0x9b, 0xa3, 0xa1, 0x0d, 0x53,
	0x21, 0x73, 0x89, 0x64, 0x40, 0xe7, 0xbb, 0xfa, 0x00, 0x1f, 0x00, 0x78, 0x9a, 0xac, 0xea, 0x89,
	0xfc, 0x92, 0x92, 0x7f, 0x63, 0x34, 0xb4, 0xef, 0x68, 0xf9, 0xeb, 0x3c, 0xc8, 0x59, 0x4f, 0x89,
	0x46, 0xdb, 0x58, 0xed, 0xfd, 0xc7, 0x02, 0x73, 0x87, 0x8c, 0xf5, 0x20, 0x03, 0xeb, 0x21, 0x13,
	0xae, 0x8c, 0x8f, 0xf8, 0xae, 0xd9, 0x26, 0x35, 0xcc, 0x9b, 0xd3, 0x95, 0xf8, 0x97, 0x43, 0xfb,
	0xba, 0x2a, 0xa7, 0x18, 0x32, 0xd1, 0x50, 0x94, 0x63, 0xbd, 0x6b, 0x7e, 0x0c, 0x56, 0x27, 0x8d,
	0xe9, 0xc1, 0xf0, 0xc1, 0xd4, 0xc6, 0x26, 0xd5, 0xa4, 0x50, 0x9e, 0x20, 0x23, 0x67, 0xa5, 0x3d,
	0x66, 0x7d, 0x67, 0x51, 0x46, 0xff, 0x95, 0xcc, 0xc0, 0xe5, 0x0c, 0xd8, 0x90, 0x8f, 0x93, 0x7e,
	0x13, 0x72, 0xc8, 0x47, 0x38, 0xf2, 0x39, 0xfc, 0x83, 0x05, 0xb6, 0xbc, 0x41, 0x30, 0x90, 0xa5,
	0xf6, 0x98, 0xb8, 0x91, 0x22, 0xbb, 0x0a, 0x2e, 0x66, 0x97, 0xb8, 0x7b, 0x63, 0x19, 0xb7, 0x88,
	0xa7, 0x2a, 0xf9, 0xc4, 0x20, 0xaa, 0x62, 0x4a, 0xeb, 0x66, 0x55, 0xe8, 0xf7, 0x4f, 0xed, 0xef,
	0xbc, 0x1c, 0xc4, 0xa5, 0x56, 0xee, 0x6c, 0xa4, 0x8a, 0xb4, 0xa7, 0x8e, 0x54, 0x23, 0x47, 0x57,
	0x44, 0x3a, 0x24, 0x22, 0xa1, 0x47, 0x5c, 0x8f, 0x0d, 0x42, 0xa1, 0x32, 0xba, 0x3a, 0x3e, 0xba,
	0x32, 0x0c, 0xc8, 0x29, 0x24, 0x94, 0xa6, 0x22, 0xfc, 0x56, 0xb5, 0xe2, 0x0e, 0x6d, 0x0e, 0xa2,
	0x88, 0x84, 0x22, 0xce, 0xc4, 0x19, 0x58, 0xd0, 0x2e, 0xf3, 0x97, 0x0a, 0xfc, 0x6d, 0x19, 0xf8,
	0xb4, 0x61, 0xc5, 0x16, 0xe0, 0x26, 0xc8, 0xf7, 0x49, 0x44, 0x99, 0xaf, 0xfc, 0x9f, 0x73, 0xcc,
	0x49, 0x8e, 0x89, 0x4d, 0xe9, 0xdb, 0xa3, 0x81, 0xe0, 0x02, 0xab, 0x32, 0x8c, 0xfd, 0xfb, 0xf9,
	0x74, 0xfe, 0xed, 0x9a, 0x87, 0x29, 0xc4, 0x59, 0x51, 0xa2, 0xe8, 0x55, 0x3d, 0x46, 0xbf, 0xb4,
	0xc0, 0x1d, 0xb5, 0x46, 0x7b, 0xe6, 0x69, 0x88, 0xdf, 0x4c, 0x1a, 0x1c, 0xfc, 0x10, 0x80, 0xb4,
	0xdd, 0x7d, 0x7d, 0xf9, 0x1b, 0x33, 0x82, 0xfe, 0x6d, 0x49, 0x4c, 0xc7, 0xdf, 0xb2, 0x04, 0x8e,
	0x04, 0x0d, 0xbb, 0xea, 0x0b, 0x7e, 0x13, 0x14, 0xfb, 0x11, 0x79, 0x4c, 0xd9, 0x80, 0xbb, 0x26,
	0xcb, 0xb2, 0xc8, 0xe7, 0xc6, 0x51, 0x92, 0x61, 0x40, 0x4e, 0x21, 0xa6, 0x1c, 0x2a, 0x02, 0x3c,
	0x06, 0xf3, 0x5c, 0xe0, 0x33, 0x62, 0x4a, 0xf6, 0x87, 0x53, 0x0f, 0x9b, 0x15, 0xf3, 0xf5, 0x5b,
	0x2a, 0x41, 0x8e, 0x56, 0x06, 0x77, 0x41, 0xde, 0xac, 0x5c, 0xb3, 0xca, 0xa3, 0xb7, 0xbe, 0x1c,
	0xda, 0xd9, 0x6d, 0xec, 0xff, 0x6c, 0x61, 0x46, 0x18, 0xfd, 0x45, 0x3d, 0x46, 0xbc, 0x07, 0x24,
	0x59, 0xd0, 0x50, 0xb9, 0xb6, 0x8d, 0x5a, 0x53, 0x6c, 0xa3, 0x14, 0xe4, 0xf5, 0x8b, 0x9b, 0xdf,
	0x38, 0xbe, 0x86, 0x47, 0x34, 0x06, 0x76, 0x16, 0xcd, 0xca, 0xaa, 0xbe, 0x68, 0x2d, 0xec, 0x11,
	0xa2, 0x7a, 0xf4, 0xaf, 0x2d, 0x50, 0x48, 0x07, 0x74, 0x9f, 0xb1, 0xde, 0x4b, 0xc1, 0xe9, 0xc1,
	0xe4, 0x64, 0x9b, 0xd4, 0x30, 0x35, 0xea, 0xd3, 0x7d, 0x43, 0xfa, 0xf4, 0xed, 0x3f, 0x5a, 0x00,
	0xa4, 0xbf, 0x48, 0xc0, 0xef, 0x82, 0xad, 0xc6, 0xa3, 0x87, 0x2d, 0xf7, 0xe8, 0xf8, 0xfd, 0xe3,
	0x93, 0x23, 0xf7, 0xe4, 0xe1, 0xd1, 0xe1, 0x6e, 0xf3, 0x60, 0xef, 0x60, 0xb7, 0xb5, 0x96, 0x2b,
	0x17, 0x2f, 0xaf, 0xaa, 0xcb, 0x27, 0x21, 0xef, 0x13, 0x8f, 0x76, 0x28, 0xf1, 0xe1, 0x9b, 0xe0,
	0xf6, 0x24, 0xb7, 0x3c, 0xed, 0xb6, 0xd6, 0xac, 0xf2, 0xca, 0xe5, 0x55, 0x75, 0x51, 0xaf, 0xe9,
	0xc4, 0x87, 0xdb, 0x60, 0xe3, 0x3a, 0xdf, 0xc1, 0xc3, 0x9f, 0xac, 0xcd, 0x94, 0x57, 0x2f, 0xaf,
	0xaa, 0x4b, 0xc9, 0x3e, 0x0f, 0x11, 0x80, 0xe3, 0x9c, 0x46, 0xdf, 0x6c, 0x19, 0x5c, 0x5e, 0x55,
	0xf3, 0x7a, 0xfe, 0x94, 0xe7, 0x3e, 0xf9, 0x5d, 0x25, 0xd7, 0xf8, 0xf1, 0xe7, 0xcf, 0x2a, 0xd6,
	0x17, 0xcf, 0x2a, 0xd6, 0x3f, 0x9e, 0x55, 0xac, 0x4f, 0x9f, 0x57, 0x72, 0x5f, 0x3c, 0xaf, 0xe4,
	0xfe, 0xfa, 0xbc, 0x92, 0xfb, 0xe9, 0x38, 0x8e, 0xf5, 0xef, 0x81, 0xfa, 0xef, 0xe3, 0x77, 0xea,
	0xe7, 0xfa, 0xa7, 0x41, 0x95, 0x92, 0x76, 0x5e, 0x2d, 0x11, 0x6f, 0xff, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x70, 0x8f, 0xfd, 0x6d, 0x35, 0x14, 0x00, 0x00,
}

func (this *Pool) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return DefiDescription()
}
func DefiDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 10339 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0xbd, 0x7b, 0x70, 0x1c, 0xc9,
		0x79, 0x18, 0xce, 0xd9, 0x07, 0xb0, 0xfb, 0xe1, 0xb5, 0x68, 0x80, 0xe0, 0x72, 0x49, 0x02, 0xe0,
		0xf0, 0x8e, 0xc7, 0xc7, 0x1d, 0x70, 0xc7, 0xe3, 0xe3, 0xb8, 0xd4, 0x1d, 0x8d, 0x05, 0x96, 0x20,
		0xee, 0xf0, 0xd2, 0x00, 0xb8, 0x93, 0xe4, 0x9f, 0x6a, 0x6b, 0xb0, 0xdb, 0x58, 0xcc, 0x61, 0x77,
		0x66, 0x6e, 0x66, 0x96, 0x24, 0x4e, 0x52, 0xd5, 0xfd, 0x24, 0x45, 0x0f, 0x3a, 0xb6, 0x24, 0x5b,
		0x25, 0x4b, 0x27, 0x51, 0xd1, 0x59, 0x49, 0xa4, 0xc8, 0x4e, 0x62, 0xc9, 0x96, 0x64, 0x25, 0xa9,
		0x8a, 0x92, 0x8a, 0x1c, 0x59, 0xe5, 0xa4, 0xa4, 0x72, 0x25, 0x76, 0x39, 0x36, 0xe5, 0x9c, 0x54,
		0x89, 0xac, 0x28, 0xb1, 0xc2, 0xc8, 0x55, 0x71, 0xa9, 0x52, 0x49, 0xf5, 0x6b, 0x5e, 0x3b, 0x8b,
		0xdd, 0xe5, 0x91, 0x77, 0x97, 0xfc, 0x43, 0x62, 0xba, 0xbf, 0xef, 0xeb, 0xaf, 0xbf, 0xfe, 0xfa,
		0x7b, 0x75, 0xcf, 0x2c, 0x7c, 0xfa, 0x12, 0x4c, 0x56, 0x0d, 0xa3, 0x5a, 0xc3, 0xd3, 0xa6, 0x65,
		0x38, 0xc6, 0x66, 0x63, 0x6b, 0xba, 0x82, 0xed, 0xb2, 0xa5, 0x99, 0x8e, 0x61, 0x4d, 0xd1, 0x36,
		0x34, 0xc4, 0x20, 0xa6, 0x04, 0x84, 0xbc, 0x04, 0xc3, 0x57, 0xb4, 0x1a, 0x9e, 0x73, 0x01, 0xd7,
		0xb0, 0x83, 0x9e, 0x80, 0xc4, 0x96, 0x56, 0xc3, 0x59, 0x69, 0x32, 0x7e, 0xa2, 0xef, 0xcc, 0x03,
		0x53, 0x21, 0xa4, 0xa9, 0x20, 0xc6, 0x2a, 0x69, 0x56, 0x28, 0x86, 0xfc, 0xc3, 0x04, 0x8c, 0x44,
		0xf4, 0x22, 0x04, 0x09, 0x5d, 0xad, 0x13, 0x8a, 0xd2, 0x89, 0xb4, 0x42, 0xff, 0x46, 0x59, 0xe8,
		0x35, 0xd5, 0xf2, 0x8e, 0x5a, 0xc5, 0xd9, 0x18, 0x6d, 0x16, 0x8f, 0x68, 0x1c, 0xa0, 0x82, 0x4d,
		0xac, 0x57, 0xb0, 0x5e, 0xde, 0xcd, 0xc6, 0x27, 0xe3, 0x27, 0xd2, 0x8a, 0xaf, 0x05, 0x9d, 0x86,
		0x61, 0xb3, 0xb1, 0x59, 0xd3, 0xca, 0x25, 0x1f, 0x18, 0x4c, 0xc6, 0x4f, 0x24, 0x95, 0x0c, 0xeb,
		0x98, 0xf3, 0x80, 0x1f, 0x82, 0xa1, 0xeb, 0x58, 0xdd, 0xf1, 0x83, 0xf6, 0x51, 0xd0, 0x41, 0xd2,
		0xec, 0x03, 0x9c, 0x85, 0xfe, 0x3a, 0xb6, 0x6d, 0xb5, 0x8a, 0x4b, 0xce, 0xae, 0x89, 0xb3, 0x09,
		0x3a, 0xfb, 0xc9, 0xa6, 0xd9, 0x87, 0x67, 0xde, 0xc7, 0xb1, 0xd6, 0x77, 0x4d, 0x8c, 0x66, 0x20,
		0x8d, 0xf5, 0x46, 0x9d, 0x51, 0x48, 0xb6, 0x90, 0x5f, 0x51, 0x6f, 0xd4, 0xc3, 0x54, 0x52, 0x04,
		0x8d, 0x93, 0xe8, 0xb5, 0xb1, 0x75, 0x4d, 0x2b, 0xe3, 0x6c, 0x0f, 0x25, 0xf0, 0x50, 0x13, 0x81,
		0x35, 0xd6, 0x1f, 0xa6, 0x21, 0xf0, 0xd0, 0x2c, 0xa4, 0xf1, 0x0d, 0x07, 0xeb, 0xb6, 0x66, 0xe8,
		0xd9, 0x5e, 0x4a, 0xe4, 0xc1, 0x88, 0x55, 0xc4, 0xb5, 0x4a, 0x98, 0x84, 0x87, 0x87, 0xce, 0x43,
		0xaf, 0x61, 0x3a, 0x9a, 0xa1, 0xdb, 0xd9, 0xd4, 0xa4, 0x74, 0xa2, 0xef, 0xcc, 0xe1, 0x48, 0x45,
		0x58, 0x61, 0x30, 0x8a, 0x00, 0x46, 0x0b, 0x90, 0xb1, 0x8d, 0x86, 0x55, 0xc6, 0xa5, 0xb2, 0x51,
		0xc1, 0x25, 0x4d, 0xdf, 0x32, 0xb2, 0x69, 0x4a, 0x60, 0xa2, 0x79, 0x22, 0x14, 0x70, 0xd6, 0xa8,
		0xe0, 0x05, 0x7d, 0xcb, 0x50, 0x06, 0xed, 0xc0, 0x33, 0x1a, 0x83, 0x1e, 0x7b, 0x57, 0x77, 0xd4,
		0x1b, 0xd9, 0x7e, 0xaa, 0x21, 0xfc, 0x49, 0xfe, 0x46, 0x0f, 0x0c, 0x75, 0xa2, 0x62, 0x97, 0x20,
		0xb9, 0x45, 0x66, 0x99, 0x8d, 0x75, 0x23, 0x03, 0x86, 0x13, 0x14, 0x62, 0xcf, 0x5d, 0x0a, 0x71,
		0x06, 0xfa, 0x74, 0x6c, 0x3b, 0xb8, 0xc2, 0x34, 0x22, 0xde, 0xa1, 0x4e, 0x01, 0x43, 0x6a, 0x56,
		0xa9, 0xc4, 0x5d, 0xa9, 0xd4, 0xdb, 0x60, 0xc8, 0x65, 0xa9, 0x64, 0xa9, 0x7a, 0x55, 0xe8, 0xe6,
		0x74, 0x3b, 0x4e, 0xa6, 0x8a, 0x02, 0x4f, 0x21, 0x68, 0xca, 0x20, 0x0e, 0x3c, 0xa3, 0x39, 0x00,
		0x43, 0xc7, 0xc6, 0x56, 0xa9, 0x82, 0xcb, 0xb5, 0x6c, 0xaa, 0x85, 0x94, 0x56, 0x08, 0x48, 0x93,
		0x94, 0x0c, 0xd6, 0x5a, 0xae, 0xa1, 0x8b, 0x9e, 0xaa, 0xf5, 0xb6, 0xd0, 0x94, 0x25, 0xb6, 0xc9,
		0x9a, 0xb4, 0x6d, 0x03, 0x06, 0x2d, 0x4c, 0xf4, 0x1e, 0x57, 0xf8, 0xcc, 0xd2, 0x94, 0x89, 0xa9,
		0xb6, 0x33, 0x53, 0x38, 0x1a, 0x9b, 0xd8, 0x80, 0xe5, 0x7f, 0x44, 0xc7, 0xc0, 0x6d, 0x28, 0x51,
		0xb5, 0x02, 0x6a, 0x85, 0xfa, 0x45, 0xe3, 0xb2, 0x5a, 0xc7, 0xb9, 0x17, 0x61, 0x30, 0x28, 0x1e,
		0x34, 0x0a, 0x49, 0xdb, 0x51, 0x2d, 0x87, 0x6a, 0x61, 0x52, 0x61, 0x0f, 0x28, 0x03, 0x71, 0xac,
		0x57, 0xa8, 0x95, 0x4b, 0x2a, 0xe4, 0x4f, 0xf4, 0x0b, 0xde, 0x84, 0xe3, 0x74, 0xc2, 0xc7, 0x9b,
		0x57, 0x34, 0x40, 0x39, 0x3c, 0xef, 0xdc, 0x05, 0x18, 0x08, 0x4c, 0xa0, 0xd3, 0xa1, 0xe5, 0x77,
		0xc3, 0xfe, 0x48, 0xd2, 0xe8, 0x6d, 0x30, 0xda, 0xd0, 0x35, 0xdd, 0xc1, 0x96, 0x69, 0x61, 0xa2,
		0xb1, 0x6c, 0xa8, 0xec, 0x7f, 0xee, 0x6d, 0xa1, 0x73, 0x1b, 0x7e, 0x68, 0x46, 0x45, 0x19, 0x69,
		0x34, 0x37, 0x9e, 0x4a, 0xa7, 0x7e, 0xd4, 0x9b, 0x79, 0xe9, 0xa5, 0x97, 0x5e, 0x8a, 0xc9, 0x9f,
		0xec, 0x81, 0xd1, 0xa8, 0x3d, 0x13, 0xb9, 0x7d, 0xc7, 0xa0, 0x47, 0x6f, 0xd4, 0x37, 0xb1, 0x45,
		0x85, 0x94, 0x54, 0xf8, 0x13, 0x9a, 0x81, 0x64, 0x4d, 0xdd, 0xc4, 0xb5, 0x6c, 0x62, 0x52, 0x3a,
		0x31, 0x78, 0xe6, 0x74, 0x47, 0xbb, 0x72, 0x6a, 0x91, 0xa0, 0x28, 0x0c, 0x13, 0x3d, 0x05, 0x09,
		0x6e, 0xa2, 0x09, 0x85, 0x53, 0x9d, 0x51, 0x20, 0x7b, 0x49, 0xa1, 0x78, 0xe8, 0x10, 0xa4, 0xc9,
		0xff, 0x4c, 0x37, 0x7a, 0x28, 0xcf, 0x29, 0xd2, 0x40, 0xf4, 0x02, 0xe5, 0x20, 0x45, 0xb7, 0x49,
		0x05, 0x0b, 0xd7, 0xe6, 0x3e, 0x13, 0xc5, 0xaa, 0xe0, 0x2d, 0xb5, 0x51, 0x73, 0x4a, 0xd7, 0xd4,
		0x5a, 0x03, 0x53, 0x85, 0x4f, 0x2b, 0xfd, 0xbc, 0xf1, 0x59, 0xd2, 0x86, 0x26, 0xa0, 0x8f, 0xed,
		0x2a, 0x4d, 0xaf, 0xe0, 0x1b, 0xd4, 0x7a, 0x26, 0x15, 0xb6, 0xd1, 0x16, 0x48, 0x0b, 0x19, 0xfe,
		0x79, 0xdb, 0xd0, 0x85, 0x6a, 0xd2, 0x21, 0x48, 0x03, 0x1d, 0xfe, 0x42, 0xd8, 0x70, 0x1f, 0x89,
		0x9e, 0x5e, 0x58, 0xa7, 0xe4, 0xaf, 0xc5, 0x20, 0x41, 0xed, 0xc5, 0x10, 0xf4, 0xad, 0xbf, 0x7d,
		0xb5, 0x58, 0x9a, 0x5b, 0xd9, 0x28, 0x2c, 0x16, 0x33, 0x12, 0x1a, 0x04, 0xa0, 0x0d, 0x57, 0x16,
		0x57, 0x66, 0xd6, 0x33, 0x31, 0xf7, 0x79, 0x61, 0x79, 0xfd, 0xfc, 0xd9, 0x4c, 0xdc, 0x45, 0xd8,
		0x60, 0x0d, 0x09, 0x3f, 0xc0, 0xe3, 0x67, 0x32, 0x49, 0x94, 0x81, 0x7e, 0x46, 0x60, 0xe1, 0x6d,
		0xc5, 0xb9, 0xf3, 0x67, 0x33, 0x3d, 0xc1, 0x96, 0xc7, 0xcf, 0x64, 0x7a, 0xd1, 0x00, 0xa4, 0x69,
		0x4b, 0x61, 0x65, 0x65, 0x31, 0x93, 0x72, 0x69, 0xae, 0xad, 0x2b, 0x0b, 0xcb, 0xf3, 0x99, 0xb4,
		0x4b, 0x73, 0x5e, 0x59, 0xd9, 0x58, 0xcd, 0x80, 0x4b, 0x61, 0xa9, 0xb8, 0xb6, 0x36, 0x33, 0x5f,
		0xcc, 0xf4, 0xb9, 0x10, 0x85, 0xb7, 0xaf, 0x17, 0xd7, 0x32, 0xfd, 0x01, 0xb6, 0x1e, 0x3f, 0x93,
		0x19, 0x70, 0x87, 0x28, 0x2e, 0x6f, 0x2c, 0x65, 0x06, 0xd1, 0x30, 0x0c, 0xb0, 0x21, 0x04, 0x13,
		0x43, 0xa1, 0xa6, 0xf3, 0x67, 0x33, 0x19, 0x8f, 0x11, 0x46, 0x65, 0x38, 0xd0, 0x70, 0xfe, 0x6c,
		0x06, 0xc9, 0xb3, 0x90, 0xa4, 0xda, 0x85, 0x10, 0x0c, 0x2e, 0xce, 0x14, 0x8a, 0x8b, 0xa5, 0x95,
		0xd5, 0xf5, 0x85, 0x95, 0xe5, 0x99, 0xc5, 0x8c, 0xe4, 0xb5, 0x29, 0xc5, 0xb7, 0x6e, 0x2c, 0x28,
		0xc5, 0xb9, 0x4c, 0xcc, 0xdf, 0xb6, 0x5a, 0x9c, 0x59, 0x2f, 0xce, 0x65, 0xe2, 0x72, 0x19, 0x46,
		0xa3, 0xec, 0x64, 0xe4, 0xce, 0xf0, 0x2d, 0x71, 0xac, 0xc5, 0x12, 0x53, 0x5a, 0x4d, 0x4b, 0xfc,
		0x83, 0x18, 0x8c, 0x44, 0xf8, 0x8a, 0xc8, 0x41, 0x2e, 0x43, 0x92, 0xa9, 0x28, 0xf3, 0x9e, 0x27,
		0x23, 0x9d, 0x0e, 0x55, 0xd8, 0x26, 0x0f, 0x4a, 0xf1, 0xfc, 0x11, 0x44, 0xbc, 0x45, 0x04, 0x41,
		0x48, 0x34, 0xd9, 0xf4, 0x77, 0x36, 0xd9, 0x74, 0xe6, 0xf6, 0xce, 0x77, 0xe2, 0xf6, 0x68, 0x5b,
		0x77, 0xb6, 0x3d, 0x19, 0x61, 0xdb, 0x2f, 0xc1, 0x70, 0x13, 0xa1, 0x8e, 0x6d, 0xec, 0xfb, 0x24,
		0xc8, 0xb6, 0x12, 0x4e, 0x1b, 0x4b, 0x17, 0x0b, 0x58, 0xba, 0x4b, 0x61, 0x09, 0x1e, 0x6d, 0xbd,
		0x08, 0x4d, 0x6b, 0xfd, 0x05, 0x09, 0xc6, 0xa2, 0x23, 0xc5, 0x48, 0x1e, 0x9e, 0x82, 0x9e, 0x3a,
		0x76, 0xb6, 0x0d, 0x11, 0x2d, 0x1d, 0x8f, 0xf0, 0xc1, 0xa4, 0x3b, 0xbc, 0xd8, 0x1c, 0xcb, 0xef,
		0xc4, 0xe3, 0xad, 0xc2, 0x3d, 0xc6, 0x4d, 0x13, 0xa7, 0x1f, 0x8e, 0xc1, 0xfe, 0x48, 0xe2, 0x91,
		0x8c, 0x1e, 0x01, 0xd0, 0x74, 0xb3, 0xe1, 0xb0, 0x88, 0x88, 0x19, 0xd8, 0x34, 0x6d, 0xa1, 0xc6,
		0x8b, 0x18, 0xcf, 0x86, 0xe3, 0xf6, 0xc7, 0x69, 0x3f, 0xb0, 0x26, 0x0a, 0xf0, 0x84, 0xc7, 0x68,
		0x82, 0x32, 0x3a, 0xde, 0x62, 0xa6, 0x4d, 0x8a, 0xf9, 0x28, 0x64, 0xca, 0x35, 0x0d, 0xeb, 0x4e,
		0xc9, 0x76, 0x2c, 0xac, 0xd6, 0x35, 0xbd, 0x4a, 0x3d, 0x48, 0x2a, 0x9f, 0xdc, 0x52, 0x6b, 0x36,
		0x56, 0x86, 0x58, 0xf7, 0x9a, 0xe8, 0x25, 0x18, 0x54, 0x81, 0x2c, 0x1f, 0x46, 0x4f, 0x00, 0x83,
		0x75, 0xbb, 0x18, 0xf2, 0xaf, 0xa6, 0xa1, 0xcf, 0x17, 0x57, 0xa3, 0xa3, 0xd0, 0xff, 0xbc, 0x7a,
		0x4d, 0x2d, 0x89, 0x5c, 0x89, 0x49, 0xa2, 0x8f, 0xb4, 0xad, 0xf2, 0x7c, 0xe9, 0x51, 0x18, 0xa5,
		0x20, 0x46, 0xc3, 0xc1, 0x56, 0xa9, 0x5c, 0x53, 0x6d, 0x9b, 0x0a, 0x2d, 0x45, 0x41, 0x11, 0xe9,
		0x5b, 0x21, 0x5d, 0xb3, 0xa2, 0x07, 0x9d, 0x83, 0x11, 0x8a, 0x51, 0x6f, 0xd4, 0x1c, 0xcd, 0xac,
		0xe1, 0x12, 0xc9, 0xde, 0x6c, 0xea, 0x49, 0x5c, 0xce, 0x86, 0x09, 0xc4, 0x12, 0x07, 0x20, 0x1c,
		0xd9, 0x68, 0x0e, 0x8e, 0x50, 0xb4, 0x2a, 0xd6, 0xb1, 0xa5, 0x3a, 0xb8, 0x84, 0x5f, 0x68, 0xa8,
		0x35, 0xbb, 0xa4, 0xea, 0x95, 0xd2, 0xb6, 0x6a, 0x6f, 0x67, 0x47, 0x09, 0x81, 0x42, 0x2c, 0x2b,
		0x29, 0x07, 0x09, 0xe0, 0x3c, 0x87, 0x2b, 0x52, 0xb0, 0x19, 0xbd, 0x72, 0x55, 0xb5, 0xb7, 0x51,
		0x1e, 0xc6, 0x28, 0x15, 0xdb, 0xb1, 0x34, 0xbd, 0x5a, 0x2a, 0x6f, 0xe3, 0xf2, 0x4e, 0xa9, 0xe1,
		0x6c, 0x3d, 0x91, 0x3d, 0xe4, 0x1f, 0x9f, 0x72, 0xb8, 0x46, 0x61, 0x66, 0x09, 0xc8, 0x86, 0xb3,
		0xf5, 0x04, 0x5a, 0x83, 0x7e, 0xb2, 0x18, 0x75, 0xed, 0x45, 0x5c, 0xda, 0x32, 0x2c, 0xea, 0x1a,
		0x07, 0x23, 0x4c, 0x93, 0x4f, 0x82, 0x53, 0x2b, 0x1c, 0x61, 0xc9, 0xa8, 0xe0, 0x7c, 0x72, 0x6d,
		0xb5, 0x58, 0x9c, 0x53, 0xfa, 0x04, 0x95, 0x2b, 0x86, 0x45, 0x14, 0xaa, 0x6a, 0xb8, 0x02, 0xee,
		0x63, 0x0a, 0x55, 0x35, 0x84, 0x78, 0xcf, 0xc1, 0x48, 0xb9, 0xcc, 0xe6, 0xac, 0x95, 0x4b, 0x3c,
		0xc7, 0xb2, 0xb3, 0x99, 0x80, 0xb0, 0xca, 0xe5, 0x79, 0x06, 0xc0, 0x75, 0xdc, 0x46, 0x17, 0x61,
		0xbf, 0x27, 0x2c, 0x3f, 0xe2, 0x70, 0xd3, 0x2c, 0xc3, 0xa8, 0xe7, 0x60, 0xc4, 0xdc, 0x6d, 0x46,
		0x44, 0x81, 0x11, 0xcd, 0xdd, 0x30, 0xda, 0x05, 0x18, 0x35, 0xb7, 0xcd, 0x66, 0xbc, 0x53, 0x7e,
		0x3c, 0x64, 0x6e, 0x9b, 0x61, 0xc4, 0x07, 0x69, 0xc2, 0x6d, 0xe1, 0xb2, 0xea, 0xe0, 0x4a, 0xf6,
		0x80, 0x1f, 0xdc, 0xd7, 0x81, 0xa6, 0x21, 0x53, 0x2e, 0x97, 0xb0, 0xae, 0x6e, 0xd6, 0x70, 0x49,
		0xb5, 0xb0, 0xae, 0xda, 0xd9, 0x09, 0x3f, 0xf0, 0x60, 0xb9, 0x5c, 0xa4, 0xbd, 0x33, 0xb4, 0x13,
		0x9d, 0x82, 0x61, 0x63, 0xf3, 0xf9, 0x32, 0x53, 0xc9, 0x92, 0x69, 0xe1, 0x2d, 0xed, 0x46, 0xf6,
		0x01, 0x2a, 0xdf, 0x21, 0xd2, 0x41, 0x15, 0x72, 0x95, 0x36, 0xa3, 0x93, 0x90, 0x29, 0xdb, 0xdb,
		0xaa, 0x65, 0x52, 0x9b, 0x6c, 0x9b, 0x6a, 0x19, 0x67, 0x1f, 0x64, 0xa0, 0xac, 0x7d, 0x59, 0x34,
		0x93, 0x2d, 0x61, 0x5f, 0xd7, 0xb6, 0x1c, 0x41, 0xf1, 0x21, 0xb6, 0x25, 0x68, 0x1b, 0xa7, 0x76,
		0x02, 0x32, 0x44, 0x14, 0x81, 0x81, 0x4f, 0x50, 0xb0, 0x41, 0x73, 0xdb, 0xf4, 0x8f, 0x7b, 0x0c,
		0x06, 0x08, 0xa4, 0x37, 0xe8, 0x49, 0x16, 0x90, 0x99, 0xdb, 0xbe, 0x11, 0xcf, 0xc2, 0x18, 0x01,
		0xaa, 0x63, 0x47, 0xad, 0xa8, 0x8e, 0xea, 0x83, 0x7e, 0x98, 0x42, 0x13, 0xb9, 0x2f, 0xf1, 0xce,
		0x00, 0x9f, 0x56, 0x63, 0x73, 0xd7, 0xd5, 0xac, 0x47, 0x18, 0x9f, 0xa4, 0x4d, 0xe8, 0xd6, 0x7d,
		0x0b, 0xba, 0xe5, 0x3c, 0xf4, 0xfb, 0x15, 0x1f, 0xa5, 0x81, 0xa9, 0x7e, 0x46, 0x22, 0x51, 0xd0,
		0xec, 0xca, 0x1c, 0x89, 0x5f, 0xde, 0x51, 0xcc, 0xc4, 0x48, 0x1c, 0xb5, 0xb8, 0xb0, 0x5e, 0x2c,
		0x29, 0x1b, 0xcb, 0xeb, 0x0b, 0x4b, 0xc5, 0x4c, 0xdc, 0x17, 0xb0, 0x3f, 0x9d, 0x48, 0x1d, 0xcf,
		0x3c, 0x24, 0x7f, 0x2f, 0x06, 0x83, 0xc1, 0x0c, 0x0c, 0xbd, 0x05, 0x0e, 0x88, 0x72, 0x89, 0x8d,
		0x9d, 0xd2, 0x75, 0xcd, 0xa2, 0x3b, 0xb2, 0xae, 0x32, 0xef, 0xe8, 0xea, 0xc4, 0x28, 0x87, 0x5a,
		0xc3, 0xce, 0x73, 0x9a, 0x45, 0xf6, 0x5b, 0x5d, 0x75, 0xd0, 0x22, 0x4c, 0xe8, 0x46, 0xc9, 0x76,
		0x54, 0xbd, 0xa2, 0x5a, 0x95, 0x92, 0x57, 0xa8, 0x2a, 0xa9, 0xe5, 0x32, 0xb6, 0x6d, 0x83, 0x79,
		0x42, 0x97, 0xca, 0x61, 0xdd, 0x58, 0xe3, 0xc0, 0x9e, 0x8b, 0x98, 0xe1, 0xa0, 0x21, 0xfd, 0x8d,
		0xb7, 0xd2, 0xdf, 0x43, 0x90, 0xae, 0xab, 0x66, 0x09, 0xeb, 0x8e, 0xb5, 0x4b, 0xe3, 0xee, 0x94,
		0x92, 0xaa, 0xab, 0x66, 0x91, 0x3c, 0xbf, 0x2e, 0xe9, 0xcf, 0xd3, 0x89, 0x54, 0x2a, 0x93, 0x7e,
		0x3a, 0x91, 0x4a, 0x67, 0x40, 0x7e, 0x35, 0x0e, 0xfd, 0xfe, 0x38, 0x9c, 0xa4, 0x35, 0x65, 0xea,
		0xb2, 0x24, 0x6a, 0xd4, 0x8e, 0xed, 0x19, 0xb5, 0x4f, 0xcd, 0x12, 0x5f, 0x96, 0xef, 0x61, 0xd1,
		0xb1, 0xc2, 0x30, 0x49, 0x1c, 0x41, 0x94, 0x0d, 0xb3, 0x68, 0x24, 0xa5, 0xf0, 0x27, 0x34, 0x0f,
		0x3d, 0xcf, 0xdb, 0x94, 0x76, 0x0f, 0xa5, 0xfd, 0xc0, 0xde, 0xb4, 0x9f, 0x5e, 0xa3, 0xc4, 0xd3,
		0x4f, 0xaf, 0x95, 0x96, 0x57, 0x94, 0xa5, 0x99, 0x45, 0x85, 0xa3, 0xa3, 0x83, 0x90, 0xa8, 0xa9,
		0x2f, 0xee, 0x06, 0xbd, 0x1e, 0x6d, 0xea, 0x74, 0x11, 0x0e, 0x42, 0xe2, 0x3a, 0x56, 0x77, 0x82,
		0xbe, 0x86, 0x36, 0xdd, 0xc7, 0xcd, 0x30, 0x0d, 0x49, 0x2a, 0x2f, 0x04, 0xc0, 0x25, 0x96, 0xd9,
		0x87, 0x52, 0x90, 0x98, 0x5d, 0x51, 0xc8, 0x86, 0xc8, 0x40, 0x3f, 0x6b, 0x2d, 0xad, 0x2e, 0x14,
		0x67, 0x8b, 0x99, 0x98, 0x7c, 0x0e, 0x7a, 0x98, 0x10, 0xc8, 0x66, 0x71, 0xc5, 0x90, 0xd9, 0xc7,
		0x1f, 0x39, 0x0d, 0x49, 0xf4, 0x6e, 0x2c, 0x15, 0x8a, 0x4a, 0x26, 0x16, 0x5c, 0xea, 0x44, 0x26,
		0x29, 0xdb, 0xd0, 0xef, 0x0f, 0xc4, 0x5f, 0x9f, 0x24, 0xfb, 0x9b, 0x12, 0xf4, 0xf9, 0x02, 0x6b,
		0x12, 0x11, 0xa9, 0xb5, 0x9a, 0x71, 0xbd, 0xa4, 0xd6, 0x34, 0xd5, 0xe6, 0xaa, 0x01, 0xb4, 0x69,
		0x86, 0xb4, 0x74, 0xba, 0x74, 0xaf, 0xd3, 0x16, 0x49, 0x66, 0x7a, 0xe4, 0xcf, 0x4a, 0x90, 0x09,
		0x47, 0xb6, 0x21, 0x36, 0xa5, 0x37, 0x92, 0x4d, 0xf9, 0x33, 0x12, 0x0c, 0x06, 0xc3, 0xd9, 0x10,
		0x7b, 0x47, 0xdf, 0x50, 0xf6, 0xfe, 0x22, 0x06, 0x03, 0x81, 0x20, 0xb6, 0x53, 0xee, 0x5e, 0x80,
		0x61, 0xad, 0x82, 0xeb, 0xa6, 0xe1, 0x60, 0xbd, 0xbc, 0x5b, 0xaa, 0xe1, 0x6b, 0xb8, 0x96, 0x95,
		0xa9, 0xd1, 0x98, 0xde, 0x3b, 0x4c, 0x9e, 0x5a, 0xf0, 0xf0, 0x16, 0x09, 0x5a, 0x7e, 0x64, 0x61,
		0xae, 0xb8, 0xb4, 0xba, 0xb2, 0x5e, 0x5c, 0x9e, 0x7d, 0x7b, 0x69, 0x63, 0xf9, 0x99, 0xe5, 0x95,
		0xe7, 0x96, 0x95, 0x8c, 0x16, 0x02, 0xbb, 0x8f, 0xdb, 0x7e, 0x15, 0x32, 0x61, 0xa6, 0xd0, 0x01,
		0x88, 0x62, 0x2b, 0xb3, 0x0f, 0x8d, 0xc0, 0xd0, 0xf2, 0x4a, 0x69, 0x6d, 0x61, 0xae, 0x58, 0x2a,
		0x5e, 0xb9, 0x52, 0x9c, 0x5d, 0x5f, 0x63, 0x85, 0x0f, 0x17, 0x7a, 0x3d, 0xb0, 0xc1, 0xe5, 0x97,
		0xe3, 0x30, 0x12, 0xc1, 0x09, 0x9a, 0xe1, 0x29, 0x0b, 0xcb, 0xa2, 0x1e, 0xe9, 0x84, 0xfb, 0x29,
		0x12, 0x33, 0xac, 0xaa, 0x96, 0xc3, 0x33, 0x9c, 0x93, 0x40, 0xa4, 0xa4, 0x3b, 0xda, 0x96, 0x86,
		0x2d, 0x5e, 0x27, 0x62, 0x79, 0xcc, 0x90, 0xd7, 0xce, 0x4a, 0x45, 0x0f, 0x03, 0x32, 0x0d, 0x5b,
		0x73, 0xb4, 0x6b, 0xb8, 0xa4, 0xe9, 0xa2, 0xa8, 0x44, 0xf2, 0x9a, 0x84, 0x92, 0x11, 0x3d, 0x0b,
		0xba, 0xe3, 0x42, 0xeb, 0xb8, 0xaa, 0x86, 0xa0, 0x89, 0x31, 0x8f, 0x2b, 0x19, 0xd1, 0xe3, 0x42,
		0x1f, 0x85, 0xfe, 0x8a, 0xd1, 0x20, 0xc1, 0x1e, 0x83, 0x23, 0xbe, 0x43, 0x52, 0xfa, 0x58, 0x9b,
		0x0b, 0xc2, 0xc3, 0x78, 0xaf, 0x9a, 0xd5, 0xaf, 0xf4, 0xb1, 0x36, 0x06, 0xf2, 0x10, 0x0c, 0xa9,
		0xd5, 0xaa, 0x45, 0x88, 0x0b, 0x42, 0x2c, 0x31, 0x19, 0x74, 0x9b, 0x29, 0x60, 0xee, 0x69, 0x48,
		0x09, 0x39, 0x10, 0x57, 0x4d, 0x24, 0x51, 0x32, 0x59, 0xb6, 0x1d, 0x3b, 0x91, 0x56, 0x52, 0xba,
		0xe8, 0x3c, 0x0a, 0xfd, 0x9a, 0x5d, 0xf2, 0x8a, 0xf3, 0xb1, 0xc9, 0xd8, 0x89, 0x94, 0xd2, 0xa7,
		0xd9, 0x6e, 0x61, 0x53, 0xfe, 0x42, 0x0c, 0x06, 0x83, 0x87, 0x0b, 0x68, 0x0e, 0x52, 0x35, 0xa3,
		0xac, 0x52, 0xd5, 0x62, 0x27, 0x5b, 0x27, 0xda, 0x9c, 0x47, 0x4c, 0x2d, 0x72, 0x78, 0xc5, 0xc5,
		0xcc, 0xfd, 0x5b, 0x09, 0x52, 0xa2, 0x19, 0x8d, 0x41, 0xc2, 0x54, 0x9d, 0x6d, 0x4a, 0x2e, 0x59,
		0x88, 0x65, 0x24, 0x85, 0x3e, 0x93, 0x76, 0xdb, 0x54, 0x75, 0xaa, 0x02, 0xbc, 0x9d, 0x3c, 0x93,
		0x75, 0xad, 0x61, 0xb5, 0x42, 0xb3, 0x1e, 0xa3, 0x5e, 0xc7, 0xba, 0x63, 0x8b, 0x75, 0xe5, 0xed,
		0xb3, 0xbc, 0x19, 0x9d, 0x86, 0x61, 0xc7, 0x52, 0xb5, 0x5a, 0x00, 0x36, 0x41, 0x61, 0x33, 0xa2,
		0xc3, 0x05, 0xce, 0xc3, 0x41, 0x41, 0xb7, 0x82, 0x1d, 0xb5, 0xbc, 0x8d, 0x2b, 0x1e, 0x52, 0x0f,
		0xad, 0x6e, 0x1c, 0xe0, 0x00, 0x73, 0xbc, 0x5f, 0xe0, 0xca, 0xdf, 0x93, 0x60, 0x58, 0xe4, 0x69,
		0x15, 0x57, 0x58, 0x4b, 0x00, 0xaa, 0xae, 0x1b, 0x8e, 0x5f, 0x5c, 0xcd, 0xaa, 0xdc, 0x84, 0x37,
		0x35, 0xe3, 0x22, 0x29, 0x3e, 0x02, 0xb9, 0x3a, 0x80, 0xd7, 0xd3, 0x52, 0x6c, 0x13, 0xd0, 0xc7,
		0x4f, 0x8e, 0xe8, 0xf1, 0x23, 0xcb, 0xec, 0x81, 0x35, 0x91, 0x84, 0x0e, 0x8d, 0x42, 0x72, 0x13,
		0x57, 0x35, 0x9d, 0xd7, 0x83, 0xd9, 0x83, 0xa8, 0xbf, 0x24, 0xdc, 0xfa, 0x4b, 0xe1, 0x23, 0x12,
		0x8c, 0x94, 0x8d, 0x7a, 0x98, 0xdf, 0x42, 0x26, 0x54, 0x5e, 0xb0, 0xaf, 0x4a, 0xef, 0x78, 0xaa,
		0xaa, 0x39, 0xdb, 0x8d, 0xcd, 0xa9, 0xb2, 0x51, 0x9f, 0xae, 0x1a, 0x35, 0x55, 0xaf, 0x7a, 0xe7,
		0xa7, 0xf4, 0x8f, 0xf2, 0x23, 0x55, 0xac, 0x3f, 0x52, 0x35, 0x7c, 0xa7, 0xa9, 0x97, 0xbc, 0x3f,
		0xff, 0xa7, 0x24, 0xfd, 0x46, 0x2c, 0x3e, 0xbf, 0x5a, 0xf8, 0x52, 0x2c, 0x37, 0xcf, 0x86, 0x5b,
		0x15, 0xe2, 0x51, 0xf0, 0x56, 0x0d, 0x97, 0xc9, 0x94, 0xe1, 0xc7, 0xa7, 0x61, 0xb4, 0x6a, 0x54,
		0x0d, 0x4a, 0x71, 0x9a, 0xfc, 0xc5, 0x4f, 0x64, 0xd3, 0x6e, 0x6b, 0xae, 0xed, 0xf1, 0x6d, 0x7e,
		0x19, 0x46, 0x38, 0x70, 0x89, 0x1e, 0x09, 0xb1, 0xc4, 0x06, 0xed, 0x59, 0x56, 0xcb, 0x7e, 0xf9,
		0x87, 0xd4, 0xa1, 0x2b, 0xc3, 0x1c, 0x95, 0xf4, 0xb1, 0xdc, 0x27, 0xaf, 0xc0, 0xfe, 0x00, 0x3d,
		0xb6, 0x6d, 0xb1, 0xd5, 0x86, 0xe2, 0xb7, 0x38, 0xc5, 0x11, 0x1f, 0xc5, 0x35, 0x8e, 0x9a, 0x9f,
		0x85, 0x81, 0x6e, 0x68, 0xfd, 0x3e, 0xa7, 0xd5, 0x8f, 0xfd, 0x44, 0xe6, 0x61, 0x88, 0x12, 0x29,
		0x37, 0x6c, 0xc7, 0xa8, 0x53, 0x9b, 0xb8, 0x37, 0x99, 0x7f, 0xfd, 0x43, 0xb6, 0x8f, 0x06, 0x09,
		0xda, 0xac, 0x8b, 0x95, 0xcf, 0x03, 0x3d, 0x05, 0xab, 0xe0, 0x72, 0xad, 0x0d, 0x85, 0x6f, 0x73,
		0x46, 0x5c, 0xf8, 0xfc, 0xb3, 0x30, 0x4a, 0xfe, 0xa6, 0x26, 0xcb, 0xcf, 0x49, 0xfb, 0x1a, 0x5c,
		0xf6, 0x7b, 0xef, 0x63, 0x5b, 0x75, 0xc4, 0x25, 0xe0, 0xe3, 0xc9, 0xb7, 0x8a, 0x55, 0xec, 0x38,
		0xd8, 0xb2, 0x4b, 0x6a, 0x2d, 0x8a, 0x3d, 0x5f, 0x11, 0x23, 0xfb, 0xa9, 0x9f, 0x04, 0x57, 0x71,
		0x9e, 0x61, 0xce, 0xd4, 0x6a, 0xf9, 0x0d, 0x38, 0x10, 0xa1, 0x15, 0x1d, 0xd0, 0x7c, 0x99, 0xd3,
		0x1c, 0x6d, 0xd2, 0x0c, 0x42, 0x76, 0x15, 0x44, 0xbb, 0xbb, 0x96, 0x1d, 0xd0, 0xfc, 0x34, 0xa7,
		0x89, 0x38, 0xae, 0x58, 0x52, 0x42, 0xf1, 0x69, 0x18, 0xbe, 0x86, 0xad, 0x4d, 0xc3, 0xe6, 0x85,
		0xa3, 0x0e, 0xc8, 0x7d, 0x86, 0x93, 0x1b, 0xe2, 0x88, 0xb4, 0x92, 0x44, 0x68, 0x5d, 0x84, 0xd4,
		0x96, 0x5a, 0xc6, 0x1d, 0x90, 0xb8, 0xc5, 0x49, 0xf4, 0x12, 0x78, 0x82, 0x3a, 0x03, 0xfd, 0x55,
		0x83, 0x7b, 0xad, 0xf6, 0xe8, 0x9f, 0xe5, 0xe8, 0x7d, 0x02, 0x87, 0x93, 0x30, 0x0d, 0xb3, 0x51,
		0x23, 0x2e, 0xad, 0x3d, 0x89, 0xbf, 0x23, 0x48, 0x08, 0x1c, 0x4e, 0xa2, 0x0b, 0xb1, 0x7e, 0x4e,
		0x90, 0xb0, 0x7d, 0xf2, 0xbc, 0x0c, 0x7d, 0x86, 0x5e, 0xdb, 0x35, 0xf4, 0x4e, 0x98, 0x78, 0x85,
		0x53, 0x00, 0x8e, 0x42, 0x08, 0x5c, 0x82, 0x74, 0xa7, 0x0b, 0xf1, 0xf7, 0x7e, 0x22, 0xb6, 0x87,
		0x58, 0x81, 0x79, 0x18, 0x12, 0x06, 0x4a, 0x33, 0xf4, 0x0e, 0x48, 0xfc, 0x7d, 0x4e, 0x62, 0xd0,
		0x87, 0xc6, 0xa7, 0xe1, 0x60, 0xdb, 0xa9, 0xe2, 0x4e, 0x88, 0x7c, 0x41, 0x4c, 0x83, 0xa3, 0x70,
		0x51, 0x6e, 0x62, 0xbd, 0xbc, 0xdd, 0x19, 0x85, 0x2f, 0x0a, 0x51, 0x0a, 0x1c, 0x42, 0x62, 0x16,
		0x06, 0xea, 0xaa, 0x65, 0x6f, 0xab, 0xb5, 0x8e, 0x96, 0xe3, 0x1f, 0x70, 0x1a, 0xfd, 0x2e, 0x12,
		0x97, 0x48, 0x43, 0xef, 0x86, 0xcc, 0x97, 0x84, 0x44, 0x7c, 0x68, 0x7c, 0xeb, 0xd9, 0x0e, 0xad,
		0xb2, 0x75, 0x43, 0xed, 0x37, 0xc5, 0xd6, 0x63, 0xb8, 0x4b, 0x7e, 0x8a, 0x97, 0x20, 0x6d, 0x6b,
		0x2f, 0x76, 0x44, 0xe6, 0xb7, 0xc4, 0x4a, 0x53, 0x04, 0x82, 0xfc, 0x76, 0x38, 0x18, 0xe9, 0x26,
		0x3a, 0x20, 0xf6, 0x0f, 0x39, 0xb1, 0xb1, 0x08, 0x57, 0xc1, 0x4d, 0x42, 0xb7, 0x24, 0xff, 0x91,
		0x30, 0x09, 0x38, 0x44, 0x6b, 0x95, 0xe4, 0x11, 0xb6, 0xba, 0xd5, 0x9d, 0xd4, 0xfe, 0xb1, 0x90,
		0x1a, 0xc3, 0x0d, 0x48, 0x6d, 0x1d, 0xc6, 0x38, 0xc5, 0xee, 0xd6, 0xf5, 0xb7, 0x85, 0x61, 0x65,
		0xd8, 0x1b, 0xc1, 0xd5, 0xfd, 0x45, 0xc8, 0xb9, 0xe2, 0x14, 0x01, 0xab, 0x5d, 0xaa, 0xab, 0x66,
		0x07, 0x94, 0xbf, 0xcc, 0x29, 0x0b, 0x8b, 0xef, 0x46, 0xbc, 0xf6, 0x92, 0x6a, 0x12, 0xe2, 0x6f,
		0x83, 0xac, 0x20, 0xde, 0xd0, 0x2d, 0x5c, 0x36, 0xaa, 0xba, 0xf6, 0x22, 0xae, 0x74, 0x40, 0xfa,
		0x2b, 0xa1, 0xa5, 0xda, 0xf0, 0xa1, 0x13, 0xca, 0x0b, 0x90, 0x71, 0x63, 0x95, 0x92, 0x56, 0x37,
		0x0d, 0xcb, 0x69, 0x43, 0xf1, 0x77, 0xc4, 0x4a, 0xb9, 0x78, 0x0b, 0x14, 0x2d, 0x5f, 0x84, 0x41,
		0xfa, 0xd8, 0xa9, 0x4a, 0xfe, 0x2e, 0x27, 0x34, 0xe0, 0x61, 0x71, 0xc3, 0x51, 0x36, 0xea, 0xa6,
		0x6a, 0x75, 0x62, 0xff, 0xbe, 0x2a, 0x0c, 0x07, 0x47, 0xe1, 0x86, 0xc3, 0xd9, 0x35, 0x31, 0xf1,
		0xf6, 0x1d, 0x50, 0xf8, 0x9a, 0x30, 0x1c, 0x02, 0x87, 0x93, 0x10, 0x01, 0x43, 0x07, 0x24, 0xbe,
		0x2e, 0x48, 0x08, 0x1c, 0x42, 0xe2, 0xad, 0x9e, 0xa3, 0xb5, 0x70, 0x55, 0xb3, 0x1d, 0x8b, 0x85,
		0xc9, 0x7b, 0x93, 0xfa, 0xbd, 0x9f, 0x04, 0x83, 0x30, 0xc5, 0x87, 0x4a, 0x2c, 0x11, 0x2f, 0xbb,
		0xd2, 0x2c, 0xaa, 0x3d, 0x63, 0xdf, 0x10, 0x96, 0xc8, 0x87, 0x46, 0x78, 0xf3, 0x45, 0x88, 0x44,
		0xec, 0x65, 0x92, 0x3b, 0x74, 0x40, 0xee, 0x9f, 0x84, 0x98, 0x5b, 0x13, 0xb8, 0x84, 0xa6, 0x2f,
		0xfe, 0x69, 0xe8, 0x3b, 0x78, 0xb7, 0x23, 0xed, 0xfc, 0xa7, 0xa1, 0xf8, 0x67, 0x83, 0x61, 0x32,
		0x1b, 0x32, 0x14, 0x8a, 0xa7, 0x50, 0xbb, 0xfb, 0x43, 0xd9, 0xff, 0xff, 0x67, 0x7c, 0xbe, 0xc1,
		0x70, 0x2a, 0xbf, 0x48, 0x94, 0x3c, 0x18, 0xf4, 0xb4, 0x27, 0xf6, 0xbe, 0x9f, 0xb9, 0x7a, 0x1e,
		0x88, 0x79, 0xf2, 0x57, 0x60, 0x20, 0x10, 0xf0, 0xb4, 0x27, 0xf5, 0x7e, 0x4e, 0xaa, 0xdf, 0x1f,
		0xef, 0xe4, 0xcf, 0x41, 0x82, 0x04, 0x2f, 0xed, 0xd1, 0xff, 0x16, 0x47, 0xa7, 0xe0, 0xf9, 0x27,
		0x21, 0x25, 0x82, 0x96, 0xf6, 0xa8, 0x1f, 0xe0, 0xa8, 0x2e, 0x0a, 0x41, 0x17, 0x01, 0x4b, 0x7b,
		0xf4, 0x0f, 0x0a, 0x74, 0x81, 0x42, 0xd0, 0x3b, 0x17, 0xe1, 0x37, 0x7f, 0x29, 0xc1, 0x9d, 0x8e,
		0x90, 0xdd, 0x25, 0xe8, 0xe5, 0x91, 0x4a, 0x7b, 0xec, 0x0f, 0xf3, 0xc1, 0x05, 0x46, 0xfe, 0x02,
		0x24, 0x3b, 0x14, 0xf8, 0x2f, 0x73, 0x54, 0x06, 0x9f, 0x9f, 0x85, 0x3e, 0x5f, 0x74, 0xd2, 0x1e,
		0xfd, 0x57, 0x38, 0xba, 0x1f, 0x8b, 0xb0, 0xce, 0xa3, 0x93, 0xf6, 0x04, 0x3e, 0x22, 0x58, 0xe7,
		0x18, 0x44, 0x6c, 0x22, 0x30, 0x69, 0x8f, 0xfd, 0x51, 0x21, 0x75, 0x81, 0x92, 0xbf, 0x0c, 0x69,
		0xd7, 0xd9, 0xb4, 0xc7, 0xff, 0x18, 0xc7, 0xf7, 0x70, 0x88, 0x04, 0x7c, 0xce, 0xae, 0x3d, 0x89,
		0x5f, 0x15, 0x12, 0xf0, 0x61, 0x91, 0x6d, 0x14, 0x0e, 0x60, 0xda, 0x53, 0xfa, 0x35, 0xb1, 0x8d,
		0x42, 0xf1, 0x0b, 0x59, 0x4d, 0x6a, 0xf3, 0xdb, 0x93, 0xf8, 0xb8, 0x58, 0x4d, 0x0a, 0x4f, 0xd8,
		0x08, 0x47, 0x04, 0xed, 0x69, 0xfc, 0xba, 0x60, 0x23, 0x14, 0x10, 0xe4, 0x57, 0x01, 0x35, 0x47,
		0x03, 0xed, 0xe9, 0x7d, 0x92, 0xd3, 0x1b, 0x6e, 0x0a, 0x06, 0xf2, 0xcf, 0xc1, 0x58, 0x74, 0x24,
		0xd0, 0x9e, 0xea, 0xa7, 0x7e, 0x16, 0xca, 0xdd, 0xfc, 0x81, 0x40, 0x7e, 0xdd, 0x73, 0x29, 0xfe,
		0x28, 0xa0, 0x3d, 0xd9, 0x97, 0x7f, 0x16, 0x34, 0xdc, 0xfe, 0x20, 0x20, 0x3f, 0x03, 0xe0, 0x39,
		0xe0, 0xf6, 0xb4, 0x3e, 0xc3, 0x69, 0xf9, 0x90, 0xc8, 0xd6, 0xe0, 0xfe, 0xb7, 0x3d, 0xfe, 0x2d,
		0xb1, 0x35, 0x38, 0x06, 0xd9, 0x1a, 0xc2, 0xf5, 0xb6, 0xc7, 0xfe, 0xac, 0xd8, 0x1a, 0x02, 0x85,
		0x68, 0xb6, 0xcf, 0xbb, 0xb5, 0xa7, 0xf0, 0x8a, 0xd0, 0x6c, 0x1f, 0x56, 0x7e, 0x19, 0x86, 0x9b,
		0x1c, 0x62, 0x7b, 0x52, 0xbf, 0xc1, 0x49, 0x65, 0xc2, 0xfe, 0xd0, 0xef, 0xbc, 0xb8, 0x33, 0x6c,
		0x4f, 0xed, 0xf3, 0x21, 0xe7, 0xc5, 0x7d, 0x61, 0xfe, 0x12, 0xa4, 0xf4, 0x46, 0xad, 0x46, 0x36,
		0x0f, 0xda, 0xfb, 0xce, 0x5f, 0xf6, 0x2f, 0x7f, 0xce, 0xa5, 0x23, 0x10, 0xf2, 0xe7, 0x20, 0x89,
		0xeb, 0x9b, 0xb8, 0xd2, 0x0e, 0xf3, 0xc7, 0x3f, 0x17, 0x06, 0x93, 0x40, 0xe7, 0x2f, 0x03, 0xb0,
		0xd2, 0x08, 0x3d, 0x1e, 0x6c, 0x83, 0xfb, 0x5f, 0x7e, 0xce, 0x6f, 0xe3, 0x78, 0x28, 0x1e, 0x01,
		0x76, 0xb7, 0x67, 0x6f, 0x02, 0x3f, 0x09, 0x12, 0xa0, 0x2b, 0x72, 0x11, 0x7a, 0x9f, 0xb7, 0x0d,
		0xdd, 0x51, 0xab, 0xed, 0xb0, 0xff, 0x2b, 0xc7, 0x16, 0xf0, 0x44, 0x60, 0x75, 0xc3, 0xc2, 0x8e,
		0x5a, 0xb5, 0xdb, 0xe1, 0xfe, 0x37, 0x8e, 0xeb, 0x22, 0x10, 0xe4, 0xb2, 0x6a, 0x3b, 0x9d, 0xcc,
		0xfb, 0xaf, 0x04, 0xb2, 0x40, 0x20, 0x4c, 0x93, 0xbf, 0x77, 0xf0, 0x6e, 0x3b, 0xdc, 0x9f, 0x0a,
		0xa6, 0x39, 0x7c, 0xfe, 0x49, 0x48, 0x93, 0x3f, 0xd9, 0x15, 0xbb, 0x36, 0xc8, 0xff, 0x9d, 0x23,
		0x7b, 0x18, 0x64, 0x64, 0xdb, 0xa9, 0x38, 0x5a, 0x7b, 0x61, 0xdf, 0xe1, 0x2b, 0x2d, 0xe0, 0xf3,
		0x33, 0xd0, 0x67, 0x3b, 0x95, 0x4a, 0x83, 0xc7, 0xa7, 0x6d, 0xd0, 0xff, 0xc7, 0xcf, 0xdd, 0x92,
		0x85, 0x8b, 0x43, 0x56, 0xfb, 0xfa, 0x8e, 0x63, 0x1a, 0xf4, 0x08, 0xa4, 0x1d, 0x85, 0x9f, 0x71,
		0x0a, 0x3e, 0x94, 0xfc, 0x2c, 0xf4, 0x93, 0xb9, 0x58, 0xd8, 0xc4, 0xf4, 0xbc, 0xaa, 0x0d, 0x89,
		0xbf, 0xe6, 0x02, 0x08, 0x20, 0x15, 0xde, 0xf9, 0xed, 0x57, 0xc7, 0xa5, 0xef, 0xbe, 0x3a, 0x2e,
		0xfd, 0xc5, 0xab, 0xe3, 0xd2, 0x47, 0x7f, 0x30, 0xbe, 0xef, 0xbb, 0x3f, 0x18, 0xdf, 0xf7, 0x27,
		0x3f, 0x18, 0xdf, 0x17, 0x5d, 0x36, 0x86, 0x79, 0x63, 0xde, 0x60, 0x05, 0xe3, 0x77, 0xc8, 0x81,
		0x72, 0x71, 0xd5, 0xf0, 0xaa, 0xb5, 0x6e, 0x92, 0x03, 0x7f, 0x2d, 0x91, 0x84, 0x39, 0x58, 0xcb,
		0x55, 0xf5, 0xdd, 0x16, 0xef, 0xe0, 0xe4, 0x22, 0x0b, 0xc3, 0xf2, 0x5b, 0x20, 0x3e, 0xa3, 0xef,
		0xa2, 0x83, 0xcc, 0xe6, 0x95, 0x1a, 0x56, 0x8d, 0x5f, 0xfd, 0xea, 0x25, 0xcf, 0x1b, 0x56, 0x0d,
		0x8d, 0x7a, 0xf7, 0x33, 0xa5, 0x13, 0xfd, 0xfc, 0xd2, 0x65, 0x3e, 0xf1, 0xd3, 0x57, 0x26, 0xf6,
		0x15, 0x76, 0xc2, 0x33, 0xfc, 0x66, 0xdb, 0x59, 0xa6, 0x66, 0xf4, 0x5d, 0x3a, 0xc9, 0x55, 0xe9,
		0x1d, 0x49, 0x32, 0x86, 0x2d, 0x0a, 0xdb, 0xe3, 0xe1, 0xc2, 0xf6, 0x73, 0xb8, 0x56, 0x7b, 0x46,
		0x37, 0xae, 0xeb, 0xeb, 0x04, 0x6c, 0xb3, 0x87, 0xd2, 0x78, 0x1c, 0xfe, 0x76, 0x0c, 0xc6, 0x9b,
		0x6a, 0xd8, 0x7c, 0xe5, 0x5b, 0xbd, 0x80, 0x94, 0x87, 0xd4, 0x9c, 0x50, 0xa8, 0x2c, 0xf4, 0xda,
		0xb8, 0x6c, 0xe8, 0x15, 0x9b, 0x4e, 0x35, 0xae, 0x88, 0x47, 0x32, 0x55, 0x5d, 0xd5, 0x0d, 0x9b,
		0x5f, 0x8f, 0x64, 0x0f, 0x85, 0x8f, 0x4b, 0xdd, 0xad, 0xe3, 0x80, 0x18, 0x49, 0x4c, 0xf3, 0xd4,
		0x5e, 0xb5, 0x7f, 0x2a, 0x02, 0x97, 0x7f, 0x5f, 0x9d, 0xbf, 0x53, 0x71, 0x7c, 0x34, 0x06, 0x13,
		0x61, 0x71, 0x90, 0x7d, 0x64, 0x3b, 0x6a, 0xdd, 0x6c, 0x25, 0x8f, 0x4b, 0x90, 0x5e, 0x17, 0x30,
		0x5d, 0x0b, 0xe4, 0x13, 0x5d, 0x0a, 0x64, 0xd0, 0x1d, 0x4a, 0x48, 0xe4, 0x74, 0x7b, 0x89, 0xb8,
		0x53, 0xb8, 0x0b, 0x91, 0xbc, 0x37, 0x0e, 0x07, 0xcb, 0x86, 0x5d, 0x37, 0xec, 0x12, 0x53, 0x78,
		0xf6, 0xc0, 0x85, 0xd1, 0xef, 0xef, 0xea, 0xe0, 0x38, 0xe4, 0x2a, 0x0c, 0x52, 0xa3, 0x40, 0x0b,
		0xc1, 0xd4, 0x0e, 0xb7, 0x75, 0x9d, 0x7f, 0xf0, 0xef, 0x93, 0x74, 0x13, 0x0d, 0xb8, 0x88, 0xf4,
		0xa6, 0xcb, 0x3a, 0x8c, 0x6a, 0x75, 0xb3, 0x86, 0xe9, 0x91, 0x58, 0xc9, 0xed, 0x6b, 0x4f, 0xef,
		0x3b, 0x9c, 0xde, 0x88, 0x87, 0xbe, 0x20, 0xb0, 0xf3, 0x8b, 0x30, 0xac, 0x96, 0xcb, 0xd8, 0x0c,
		0x90, 0x6c, 0x63, 0xb0, 0x04, 0x83, 0x19, 0x8e, 0xe9, 0x52, 0x2b, 0x5c, 0x6e, 0xb5, 0xb6, 0xef,
		0x78, 0xd0, 0xb7, 0x68, 0x16, 0xae, 0x62, 0xfd, 0x11, 0x1d, 0x3b, 0xd7, 0x0d, 0x6b, 0x87, 0x8b,
		0xf7, 0x11, 0x36, 0x94, 0x58, 0x84, 0xf7, 0xc7, 0x61, 0x9c, 0x75, 0x4c, 0x6f, 0xaa, 0x36, 0x9e,
		0xbe, 0xf6, 0xd8, 0x26, 0x76, 0xd4, 0xc7, 0xa6, 0xcb, 0x86, 0x26, 0xb6, 0xe9, 0x08, 0x5f, 0x17,
		0xd2, 0x3f, 0xc5, 0xfb, 0x5b, 0xd8, 0xa9, 0x79, 0x48, 0xcc, 0x1a, 0x9a, 0x4e, 0x34, 0xb2, 0x82,
		0x75, 0xa3, 0xce, 0xad, 0x14, 0x7b, 0x40, 0xc7, 0xa0, 0x47, 0xad, 0x1b, 0x0d, 0xdd, 0x61, 0xa7,
		0x79, 0x85, 0xbe, 0x6f, 0xdf, 0x9e, 0xd8, 0xf7, 0xa7, 0xb7, 0x27, 0xe2, 0x0b, 0xba, 0xa3, 0xf0,
		0xae, 0x7c, 0xe2, 0x47, 0x9f, 0x9b, 0x90, 0xe4, 0xa7, 0xa1, 0x77, 0x0e, 0x97, 0xef, 0x86, 0xd6,
		0x1c, 0x2e, 0x87, 0x68, 0x9d, 0x84, 0xd4, 0x82, 0xee, 0xb0, 0x2b, 0xc4, 0x47, 0x20, 0xae, 0xe9,
		0xec, 0x52, 0x5a, 0x68, 0x7c, 0xd2, 0x4e, 0x40, 0xe7, 0x70, 0xd9, 0x05, 0xad, 0xe0, 0x72, 0x18,
		0x94, 0x90, 0x27, 0xed, 0x85, 0xb9, 0x3f, 0xf9, 0x8f, 0xe3, 0xfb, 0x5e, 0x7a, 0x75, 0x7c, 0x5f,
		0xcb, 0x95, 0xf0, 0x7b, 0x07, 0x2e, 0x62, 0xbe, 0x04, 0x76, 0x65, 0x67, 0xda, 0x09, 0xec, 0x85,
		0x2f, 0x25, 0xe0, 0x08, 0x7d, 0x29, 0xc4, 0xaa, 0x6b, 0xba, 0x33, 0x5d, 0xb6, 0x76, 0x4d, 0x87,
		0xba, 0x13, 0x63, 0x8b, 0xaf, 0xc2, 0xb0, 0xd7, 0x3d, 0xc5, 0xba, 0x5b, 0xac, 0xc1, 0x16, 0x24,
		0x57, 0x09, 0x1e, 0x11, 0x9c, 0x63, 0x38, 0x6a, 0x8d, 0x9b, 0x0b, 0xf6, 0x40, 0x5a, 0xd9, 0x8b,
		0x24, 0x31, 0xd6, 0xaa, 0x89, 0x77, 0x48, 0x6a, 0x58, 0xdd, 0x62, 0x17, 0x77, 0xe3, 0xd4, 0x85,
		0xa4, 0x48, 0x03, 0xbd, 0xa3, 0x3b, 0x0a, 0x49, 0xb5, 0xc1, 0x8e, 0x9c, 0xe3, 0xc4, 0xb7, 0xd0,
		0x07, 0xf9, 0x19, 0xe8, 0xe5, 0xc7, 0x5c, 0x28, 0x03, 0xf1, 0x1d, 0xbc, 0x4b, 0xc7, 0xe9, 0x57,
		0xc8, 0x9f, 0x68, 0x0a, 0x92, 0x94, 0x79, 0xfe, 0x46, 0x42, 0x76, 0xaa, 0x89, 0xfb, 0x29, 0xca,
		0xa4, 0xc2, 0xc0, 0xe4, 0xa7, 0x21, 0x35, 0x67, 0xd4, 0x35, 0xdd, 0x08, 0x52, 0x4b, 0x33, 0x6a,
		0x94, 0x67, 0xb3, 0xc1, 0xd7, 0x5a, 0x61, 0x0f, 0x68, 0x0c, 0x7a, 0xd8, 0x45, 0x6e, 0x7e, 0x6c,
		0xce, 0x9f, 0xe4, 0x59, 0xe8, 0xa5, 0xb4, 0x57, 0x4c, 0x84, 0xf8, 0x9b, 0x3d, 0xfc, 0xc6, 0x38,
		0x35, 0x0b, 0x9c, 0x7c, 0xcc, 0x63, 0x16, 0x41, 0xa2, 0xa2, 0x3a, 0x2a, 0x9f, 0x37, 0xfd, 0x5b,
		0x7e, 0x0a, 0x52, 0x9c, 0x88, 0x8d, 0xce, 0x40, 0xdc, 0x30, 0x6d, 0x7e, 0xf0, 0x9d, 0x6b, 0x35,
		0x95, 0x15, 0xb3, 0x90, 0x20, 0x5a, 0xa2, 0x10, 0xe0, 0x82, 0xd2, 0x52, 0x2d, 0x9e, 0xf0, 0xa9,
		0x85, 0x6f, 0xc9, 0x7d, 0x7f, 0xb2, 0x25, 0x6d, 0x52, 0x07, 0x57, 0x59, 0x5e, 0x89, 0xc1, 0xb8,
		0xaf, 0xf7, 0x1a, 0xb6, 0x48, 0xae, 0xc7, 0x34, 0x8a, 0x6b, 0x0b, 0xf2, 0x31, 0xc9, 0xfb, 0x5b,
		0xa8, 0xcb, 0x93, 0x10, 0x9f, 0x31, 0x4d, 0x94, 0x83, 0x14, 0x3b, 0xe0, 0x36, 0x98, 0xbe, 0x24,
		0x14, 0xf7, 0x99, 0xf4, 0xd9, 0xc6, 0x96, 0x73, 0x5d, 0xb5, 0xdc, 0x57, 0x98, 0xc4, 0xb3, 0x7c,
		0x11, 0xd2, 0xb3, 0x86, 0x6e, 0x63, 0xdd, 0x6e, 0x50, 0x47, 0xb4, 0x59, 0x33, 0xca, 0x3b, 0x9c,
		0x02, 0x7b, 0x20, 0x02, 0x57, 0x4d, 0x93, 0x62, 0x26, 0x14, 0xf2, 0x27, 0xdb, 0x97, 0x85, 0xb5,
		0x96, 0x22, 0xba, 0xd8, 0xbd, 0x88, 0xf8, 0x24, 0x5d, 0x19, 0xfd, 0x2f, 0x09, 0x0e, 0x37, 0x6f,
		0xa8, 0x1d, 0xbc, 0x6b, 0x77, 0xbb, 0x9f, 0xde, 0x06, 0xe9, 0x55, 0xfa, 0x1e, 0xf1, 0x33, 0x78,
		0x17, 0xe5, 0xa0, 0x17, 0x57, 0xce, 0x9c, 0x3b, 0xf7, 0xd8, 0x45, 0xa6, 0xed, 0x57, 0xf7, 0x29,
		0xa2, 0x01, 0x8d, 0x43, 0xda, 0xc6, 0x65, 0xf3, 0xcc, 0xb9, 0xf3, 0x3b, 0x8f, 0x31, 0xf5, 0xba,
		0xba, 0x4f, 0xf1, 0x9a, 0xf2, 0x29, 0x32, 0xeb, 0x1f, 0xbd, 0x32, 0x21, 0x15, 0x92, 0x10, 0xb7,
		0x1b, 0xf5, 0xfb, 0xaa, 0x23, 0x2f, 0x27, 0x61, 0xd2, 0x8f, 0x49, 0xbd, 0xf5, 0x35, 0xb5, 0xa6,
		0x55, 0x54, 0xef, 0x0d, 0xf0, 0x8c, 0x4f, 0x06, 0x14, 0x22, 0x5a, 0x04, 0xb9, 0x3d, 0x25, 0x29,
		0x7f, 0x45, 0x82, 0xfe, 0x67, 0x05, 0xe5, 0x35, 0xec, 0xa0, 0x4b, 0x00, 0xee, 0x48, 0x62, 0xdb,
		0x1c, 0x9a, 0x0a, 0x8f, 0x35, 0xe5, 0xe2, 0x28, 0x3e, 0x70, 0x74, 0x81, 0x2a, 0xa2, 0x69, 0xd8,
		0xfc, 0xfd, 0x97, 0x36, 0xa8, 0x2e, 0x30, 0x7a, 0x18, 0x10, 0xb5, 0x70, 0xa5, 0x6b, 0x86, 0xa3,
		0xe9, 0xd5, 0x92, 0x69, 0x5c, 0xe7, 0x2f, 0x0b, 0xc6, 0x95, 0x0c, 0xed, 0x79, 0x96, 0x76, 0xac,
		0x92, 0x76, 0xc2, 0x74, 0xda, 0xa5, 0x42, 0x62, 0x2b, 0xb5, 0x52, 0xb1, 0xb0, 0x6d, 0x73, 0x23,
		0x26, 0x1e, 0xd1, 0x25, 0xe8, 0x35, 0x1b, 0x9b, 0x25, 0x61, 0x31, 0xfa, 0xce, 0x1c, 0x8e, 0xda,
		0xff, 0x42, 0x3f, 0xb8, 0x05, 0xe8, 0x31, 0x1b, 0x9b, 0x44, 0x5b, 0x8e, 0x42, 0x7f, 0x04, 0x33,
		0x7d, 0xd7, 0x3c, 0x3e, 0xe8, 0xeb, 0xeb, 0x7c, 0x06, 0x25, 0xd3, 0xd2, 0x0c, 0x4b, 0x73, 0x76,
		0xe9, 0xed, 0x95, 0xb8, 0x92, 0x11, 0x1d, 0xab, 0xbc, 0x5d, 0xde, 0x81, 0xa1, 0x35, 0x1a, 0x5b,
		0x78, 0x9c, 0x9f, 0xf3, 0xf8, 0x93, 0xda, 0xf3, 0xd7, 0x92, 0xb3, 0x58, 0x13, 0x67, 0x85, 0xb7,
		0xb6, 0xd4, 0xce, 0x0b, 0xdd, 0x6b, 0x67, 0xd0, 0xdb, 0xfd, 0xd5, 0xc1, 0xc0, 0xe6, 0xe4, 0xa1,
		0xa4, 0xcf, 0x7c, 0x75, 0xaa, 0x98, 0xed, 0x42, 0xea, 0xdc, 0xde, 0x4e, 0x35, 0xd7, 0xc6, 0x8c,
		0xe6, 0xda, 0x6e, 0x21, 0xf9, 0x22, 0x0c, 0xac, 0xaa, 0x96, 0xb3, 0x86, 0x9d, 0xab, 0x58, 0xad,
		0x60, 0x2b, 0xe8, 0x75, 0x07, 0x84, 0xd7, 0x45, 0x90, 0xa0, 0xae, 0x95, 0x79, 0x1d, 0xfa, 0xb7,
		0xbc, 0x0d, 0x09, 0x7a, 0x83, 0xcd, 0xf5, 0xc8, 0x1c, 0x83, 0x79, 0x64, 0x62, 0x4b, 0x77, 0x1d,
		0x6c, 0x8b, 0x84, 0x8e, 0x3e, 0xa0, 0xb3, 0xc2, 0xaf, 0xc6, 0xf7, 0xf6, 0xab, 0x5c, 0x11, 0xb9,
		0x77, 0xad, 0x41, 0x6f, 0x81, 0x98, 0xe2, 0x85, 0x39, 0x97, 0x11, 0xc9, 0x63, 0x04, 0x2d, 0xc1,
		0x90, 0xa9, 0x5a, 0x0e, 0xbd, 0xba, 0xbf, 0x4d, 0x67, 0xc1, 0x75, 0x7d, 0xa2, 0x79, 0xe7, 0x05,
		0x26, 0xcb, 0x47, 0x19, 0x30, 0xfd, 0x8d, 0xf2, 0x7f, 0x4a, 0x40, 0x0f, 0x17, 0xc6, 0x93, 0xd0,
		0xcb, 0xc5, 0xca, 0xb5, 0xf3, 0xc8, 0x54, 0xb3, 0x63, 0x9a, 0x72, 0x1d, 0x08, 0xa7, 0x27, 0x70,
		0xd0, 0x71, 0x48, 0x95, 0xb7, 0x55, 0x4d, 0x2f, 0x69, 0x15, 0x11, 0xe6, 0xbd, 0x7a, 0x7b, 0xa2,
		0x77, 0x96, 0xb4, 0x2d, 0xcc, 0x29, 0xbd, 0xb4, 0x73, 0xa1, 0x42, 0x22, 0x81, 0x6d, 0xac, 0x55,
		0xb7, 0x1d, 0xbe, 0xc3, 0xf8, 0x13, 0x7a, 0x02, 0x12, 0x44, 0x21, 0xf8, 0x9b, 0x5d, 0xb9, 0xa6,
		0x60, 0xdb, 0xcd, 0x78, 0x0a, 0x29, 0x32, 0xf0, 0x47, 0xbf, 0x3f, 0x21, 0x29, 0x14, 0x03, 0xcd,
		0xc2, 0x40, 0x4d, 0xb5, 0x9d, 0x12, 0xf5, 0x60, 0x64, 0xf8, 0x24, 0x25, 0x71, 0xb0, 0x59, 0x20,
		0x5c, 0xb0, 0x9c, 0xf5, 0x3e, 0x82, 0xc5, 0x9a, 0x2a, 0xe8, 0x04, 0x64, 0x28, 0x91, 0xb2, 0x51,
		0xaf, 0x6b, 0x0e, 0x8b, 0xad, 0x7a, 0xa8, 0xdc, 0x07, 0x49, 0xfb, 0x2c, 0x6d, 0xa6, 0x11, 0xd6,
		0x21, 0x48, 0xd3, 0x57, 0x49, 0x28, 0x08, 0xbb, 0x36, 0x99, 0x22, 0x0d, 0xb4, 0xf3, 0x21, 0x18,
		0xf2, 0xec, 0x23, 0x03, 0x49, 0x31, 0x2a, 0x5e, 0x33, 0x05, 0x7c, 0x14, 0x46, 0x75, 0x7c, 0x83,
		0x5e, 0xe4, 0x0c, 0x40, 0xa7, 0x29, 0x34, 0x22, 0x7d, 0xcf, 0x06, 0x31, 0x1e, 0x84, 0xc1, 0xb2,
		0x10, 0x3e, 0x83, 0x05, 0x0a, 0x3b, 0xe0, 0xb6, 0x52, 0xb0, 0x83, 0x90, 0x52, 0x4d, 0x93, 0x01,
		0xf4, 0x71, 0xfb, 0x68, 0x9a, 0xb4, 0xeb, 0x14, 0x0c, 0xd3, 0x39, 0x5a, 0xd8, 0x6e, 0xd4, 0x1c,
		0x4e, 0xa4, 0x9f, 0xc2, 0x0c, 0x91, 0x0e, 0x85, 0xb5, 0x53, 0xd8, 0x63, 0x30, 0x80, 0xaf, 0x69,
		0x15, 0xac, 0x97, 0x31, 0x83, 0x1b, 0xa0, 0x70, 0xfd, 0xa2, 0x91, 0x02, 0x9d, 0x04, 0xd7, 0xee,
		0x95, 0x84, 0x4d, 0x1e, 0x64, 0xf4, 0x44, 0xfb, 0x0c, 0x6b, 0x96, 0xb3, 0x90, 0x98, 0x53, 0x1d,
		0x95, 0x04, 0x18, 0xce, 0x0d, 0xe6, 0x68, 0xfa, 0x15, 0xf2, 0xa7, 0xfc, 0xa3, 0x18, 0x24, 0x9e,
		0x35, 0x1c, 0x8c, 0x1e, 0xf7, 0x05, 0x80, 0x83, 0x51, 0xfa, 0xbc, 0xa6, 0x55, 0x75, 0x5c, 0x59,
		0xb2, 0xab, 0xbe, 0xf7, 0xb9, 0x3d, 0x75, 0x8a, 0x05, 0xd4, 0x69, 0x14, 0x92, 0x96, 0xd1, 0xd0,
		0x2b, 0xe2, 0xc6, 0x21, 0x7d, 0x40, 0x45, 0x48, 0xb9, 0x5a, 0x92, 0x68, 0xa7, 0x25, 0x43, 0x44,
		0x4b, 0x88, 0x0e, 0xf3, 0x06, 0xa5, 0x77, 0x93, 0x2b, 0x4b, 0x01, 0xd2, 0xae, 0xf1, 0xe2, 0xda,
		0xd6, 0x99, 0xc2, 0x7a, 0x68, 0xc4, 0x99, 0xb8, 0x6b, 0xef, 0x0a, 0x8f, 0x69, 0x5c, 0xc6, 0xed,
		0xe0, 0xd2, 0x0b, 0xa8, 0x15, 0x7f, 0xb7, 0xbc, 0x97, 0xce, 0xcb, 0x53, 0x2b, 0xf6, 0x7e, 0xf9,
		0x61, 0x48, 0xdb, 0x5a, 0x55, 0x57, 0x9d, 0x86, 0x85, 0xb9, 0xe6, 0x79, 0x0d, 0xf2, 0x37, 0x25,
		0xe8, 0x61, 0x9a, 0xec, 0x93, 0x9b, 0x14, 0x2d, 0xb7, 0x58, 0x2b, 0xb9, 0xc5, 0xef, 0x5e, 0x6e,
		0x33, 0x00, 0x2e, 0x33, 0x36, 0x7f, 0x37, 0x38, 0x22, 0x62, 0x60, 0x2c, 0xae, 0x69, 0x55, 0xbe,
		0x51, 0x7d, 0x48, 0xf2, 0x9f, 0x4b, 0x24, 0x88, 0xe5, 0xfd, 0x68, 0x06, 0x06, 0x04, 0x5f, 0xa5,
		0xad, 0x9a, 0x5a, 0xe5, 0xba, 0x73, 0xa4, 0x25, 0x73, 0x57, 0x6a, 0x6a, 0x55, 0xe9, 0xe3, 0xfc,
		0x90, 0x87, 0xe8, 0x75, 0x88, 0xb5, 0x58, 0x87, 0xc0, 0xc2, 0xc7, 0xef, 0x6e, 0xe1, 0x03, 0x4b,
		0x94, 0x08, 0x2f, 0xd1, 0xef, 0xc4, 0x68, 0x32, 0x63, 0x1a, 0xb6, 0x5a, 0x7b, 0x3d, 0x76, 0xc4,
		0x21, 0x48, 0x9b, 0x46, 0xad, 0xc4, 0x7a, 0xd8, 0x4d, 0xdc, 0x94, 0x69, 0xd4, 0x94, 0xa6, 0x65,
		0x4f, 0xde, 0xa3, 0xed, 0xd2, 0x73, 0x0f, 0xa4, 0xd6, 0x1b, 0x96, 0x9a, 0x05, 0xfd, 0x4c, 0x14,
		0xdc, 0x97, 0x3d, 0x4a, 0x64, 0x40, 0x9d, 0xa3, 0xd4, 0xec, 0x7b, 0x19, 0xdb, 0x0c, 0x52, 0xe1,
		0x70, 0x04, 0x83, 0x99, 0xfe, 0xa8, 0x2c, 0xd8, 0xaf, 0x96, 0x0a, 0x87, 0x93, 0x3f, 0x21, 0x01,
		0x2c, 0x12, 0xc9, 0xd2, 0xf9, 0x12, 0x2f, 0x64, 0x53, 0x16, 0x4a, 0x81, 0x91, 0xc7, 0x5b, 0x2d,
		0x1a, 0x1f, 0xbf, 0xdf, 0xf6, 0xf3, 0x3d, 0x0b, 0x03, 0x9e, 0x32, 0xda, 0x58, 0x30, 0x33, 0xbe,
		0x47, 0x54, 0xbd, 0x86, 0x1d, 0xa5, 0xff, 0x9a, 0xef, 0x49, 0xfe, 0x97, 0x12, 0xa4, 0x29, 0x4f,
		0x4b, 0xd8, 0x51, 0x03, 0x6b, 0x28, 0xdd, 0xfd, 0x1a, 0x1e, 0x01, 0x60, 0x64, 0x6c, 0xed, 0x45,
		0xcc, 0x35, 0x2b, 0x4d, 0x5b, 0xd6, 0xb4, 0x17, 0x31, 0x3a, 0xef, 0x0a, 0x3c, 0xbe, 0xb7, 0xc0,
		0x45, 0xd4, 0xcd, 0xc5, 0x7e, 0x00, 0x7a, 0xe9, 0x27, 0x72, 0x6e, 0xd8, 0x3c, 0x90, 0xee, 0xd1,
		0x1b, 0xf5, 0xf5, 0x1b, 0xb6, 0xfc, 0x3c, 0xf4, 0xae, 0xdf, 0x60, 0xb5, 0x91, 0x43, 0x90, 0xb6,
		0x0c, 0x83, 0xfb, 0x64, 0x16, 0x0b, 0xa5, 0x48, 0x03, 0x75, 0x41, 0xa2, 0x1e, 0x10, 0xf3, 0xea,
		0x01, 0x5e, 0x41, 0x23, 0xde, 0x51, 0x41, 0xe3, 0xd4, 0x1f, 0x4b, 0xd0, 0xe7, 0xb3, 0x0f, 0xe8,
		0x31, 0xd8, 0x5f, 0x58, 0x5c, 0x99, 0x7d, 0xa6, 0xb4, 0x30, 0x57, 0xba, 0xb2, 0x38, 0x33, 0xef,
		0xbd, 0x6b, 0x92, 0x1b, 0xbb, 0x79, 0x6b, 0x12, 0xf9, 0x60, 0x37, 0xf4, 0x1d, 0xdd, 0xb8, 0xae,
		0xa3, 0x69, 0x18, 0x0d, 0xa2, 0xcc, 0x14, 0xd6, 0x8a, 0xcb, 0xeb, 0x19, 0x29, 0xb7, 0xff, 0xe6,
		0xad, 0xc9, 0x61, 0x1f, 0xc6, 0xcc, 0xa6, 0x8d, 0x75, 0xa7, 0x19, 0x61, 0x76, 0x65, 0x69, 0x69,
		0x61, 0x3d, 0x13, 0x6b, 0x42, 0xe0, 0x06, 0xfb, 0x24, 0x0c, 0x07, 0x11, 0x96, 0x17, 0x16, 0x33,
		0xf1, 0x1c, 0xba, 0x79, 0x6b, 0x72, 0xd0, 0x07, 0xbd, 0xac, 0xd5, 0x72, 0xa9, 0x0f, 0x7d, 0x7e,
		0x7c, 0xdf, 0x17, 0xff, 0xee, 0xb8, 0x44, 0x66, 0x36, 0x10, 0xb0, 0x11, 0xe8, 0x61, 0x38, 0xb0,
		0xb6, 0x30, 0xbf, 0x5c, 0x9c, 0x2b, 0x2d, 0xad, 0xcd, 0x97, 0xd8, 0x47, 0x36, 0xdc, 0xd9, 0x0d,
		0xdd, 0xbc, 0x35, 0xd9, 0xc7, 0xa7, 0xd4, 0x0a, 0x7a, 0x55, 0x29, 0x3e, 0xbb, 0xb2, 0x5e, 0xcc,
		0x48, 0x0c, 0x7a, 0xd5, 0xc2, 0xd7, 0x0c, 0x87, 0x7d, 0x43, 0xeb, 0x51, 0x38, 0x18, 0x01, 0xed,
		0x4e, 0x6c, 0xf8, 0xe6, 0xad, 0xc9, 0x81, 0x55, 0x0b, 0xb3, 0xfd, 0x43, 0x31, 0xa6, 0x20, 0xdb,
		0x8c, 0xb1, 0xb2, 0xba, 0xb2, 0x36, 0xb3, 0x98, 0x99, 0xcc, 0x65, 0x6e, 0xde, 0x9a, 0xec, 0x17,
		0xc6, 0x90, 0xc0, 0x7b, 0x33, 0xbb, 0x9f, 0x19, 0xcf, 0x57, 0x4f, 0xc0, 0xfe, 0xaa, 0xda, 0xb0,
		0xed, 0xe9, 0x0a, 0xde, 0xd2, 0xe8, 0x3f, 0x3c, 0xd5, 0x01, 0xda, 0x3c, 0x45, 0x5a, 0x5a, 0x24,
		0x39, 0xad, 0x8f, 0x8f, 0x72, 0x6d, 0x4e, 0x58, 0xda, 0xe7, 0x47, 0xad, 0x0b, 0xf0, 0xb9, 0x36,
		0x65, 0xe1, 0xdc, 0x9e, 0x19, 0x9c, 0xfc, 0x22, 0x0c, 0x5e, 0xd5, 0x6c, 0xc7, 0xb0, 0xb4, 0xb2,
		0x5a, 0xa3, 0x6f, 0x91, 0x9c, 0xef, 0xd4, 0x7e, 0x86, 0xb6, 0xf3, 0xa3, 0xd0, 0x4b, 0x84, 0xc3,
		0x2c, 0x17, 0xf1, 0xee, 0x99, 0x29, 0x4f, 0x64, 0x53, 0x73, 0x78, 0x4b, 0x13, 0x69, 0x03, 0x07,
		0x93, 0xff, 0x40, 0x82, 0xbe, 0x39, 0xdf, 0xc5, 0x9d, 0x2c, 0xf4, 0xd6, 0x0d, 0x5d, 0xdb, 0xe1,
		0x43, 0xa7, 0x15, 0xf1, 0x88, 0x72, 0x90, 0x62, 0xef, 0x50, 0x39, 0xbb, 0xa2, 0xb2, 0x25, 0x9e,
		0x09, 0xd6, 0x75, 0xbc, 0x69, 0x6b, 0x8e, 0x78, 0xdd, 0x4a, 0x3c, 0xa2, 0x2b, 0x90, 0xb1, 0x71,
		0xb9, 0x41, 0x52, 0xf2, 0x52, 0xd9, 0xd0, 0x1d, 0xb5, 0xec, 0xb0, 0xb7, 0x71, 0x0a, 0x87, 0xee,
		0xdc, 0x9e, 0x38, 0xb0, 0xab, 0xd6, 0x6b, 0x79, 0x39, 0x0c, 0x21, 0x2b, 0x43, 0xa2, 0x69, 0x96,
		0xb5, 0x90, 0x11, 0x2a, 0xd8, 0x51, 0xb5, 0x9a, 0x9d, 0x65, 0x75, 0x7e, 0xf1, 0x98, 0x4f, 0x7d,
		0xf2, 0x73, 0x13, 0xfb, 0x68, 0xf1, 0xfa, 0xeb, 0x49, 0x48, 0x90, 0x39, 0x92, 0x41, 0x0d, 0x13,
		0x5b, 0x81, 0x90, 0x42, 0x0a, 0x0f, 0x1a, 0x86, 0x90, 0x95, 0x21, 0xd1, 0x24, 0xc2, 0x8d, 0x29,
		0xe8, 0xb1, 0x1d, 0xd5, 0x69, 0xb0, 0x80, 0x64, 0xf0, 0xcc, 0x98, 0x5f, 0x9a, 0x05, 0x43, 0xaf,
		0xac, 0xd1, 0x5e, 0x85, 0x43, 0xa1, 0x2b, 0xd0, 0xe3, 0x18, 0x3b, 0x98, 0x7f, 0xc8, 0x23, 0x5d,
		0x98, 0xe2, 0x95, 0xf0, 0xe3, 0xed, 0xab, 0xdb, 0x53, 0xb4, 0xae, 0xcf, 0xb0, 0x91, 0x03, 0x99,
		0x0a, 0xae, 0xe1, 0x2a, 0x73, 0x43, 0xdb, 0x2a, 0x8b, 0xd6, 0x08, 0xc5, 0x85, 0x2e, 0x28, 0xce,
		0xe1, 0xb2, 0x37, 0xdb, 0x30, 0x3d, 0x59, 0x19, 0x72, 0x9b, 0xd6, 0x68, 0x0b, 0xba, 0x1c, 0xb8,
		0xc2, 0xc5, 0x3f, 0x28, 0x76, 0x20, 0xa8, 0x40, 0x6e, 0xb7, 0xc8, 0xe1, 0xfc, 0x97, 0xbe, 0xae,
		0x40, 0xa6, 0xa1, 0x6f, 0x1a, 0x3a, 0x7d, 0x9f, 0x8a, 0xc7, 0x40, 0x24, 0x06, 0x8e, 0xfb, 0xc5,
		0x1e, 0x86, 0x90, 0x95, 0x21, 0xb7, 0xe9, 0x2a, 0x8b, 0x94, 0x2a, 0x30, 0xe8, 0x41, 0xd1, 0xa4,
		0x34, 0xdd, 0x36, 0x68, 0x39, 0x4a, 0xd8, 0xb9, 0x73, 0x7b, 0x62, 0x7f, 0x78, 0x14, 0x82, 0x2f,
		0xd3, 0x68, 0x66, 0xc0, 0x6d, 0x24, 0x68, 0xe8, 0xdd, 0x30, 0x52, 0xd7, 0xf4, 0x92, 0x8d, 0x6b,
		0x5b, 0x25, 0x2e, 0x0a, 0x32, 0x6d, 0xfa, 0x15, 0x8b, 0xc2, 0x62, 0x77, 0x2b, 0x77, 0xe7, 0xf6,
		0x44, 0x8e, 0x0d, 0x1c, 0x41, 0x52, 0x56, 0x86, 0xeb, 0x9a, 0xbe, 0x86, 0x6b, 0x5b, 0x73, 0x6e,
		0x5b, 0xbe, 0xff, 0x43, 0x9f, 0x9b, 0xd8, 0xc7, 0x35, 0x77, 0x9f, 0x7c, 0x01, 0x06, 0x88, 0xe2,
		0x72, 0xbd, 0xc3, 0x36, 0x09, 0xb7, 0x54, 0xf1, 0x40, 0x93, 0xb5, 0xb4, 0xe2, 0x35, 0x30, 0x95,
		0x7f, 0xe9, 0xcf, 0x26, 0x25, 0xf9, 0x96, 0x04, 0x3d, 0x73, 0x73, 0xab, 0xaa, 0x66, 0xa1, 0x05,
		0x18, 0xf6, 0x16, 0x39, 0xa8, 0xf5, 0x87, 0xef, 0xdc, 0x9e, 0xc8, 0x86, 0xf5, 0xc0, 0x55, 0x7b,
		0x4f, 0xd7, 0x84, 0xde, 0xe7, 0xa1, 0x9f, 0xac, 0x77, 0x20, 0x1c, 0x4f, 0x17, 0x0e, 0xdc, 0xb9,
		0x3d, 0x31, 0x22, 0xa8, 0x78, 0xbd, 0x32, 0x51, 0x02, 0x97, 0xf7, 0xd0, 0xc4, 0x2e, 0x42, 0x2f,
		0x63, 0xcf, 0xa6, 0x51, 0x01, 0xf9, 0x83, 0x17, 0x39, 0x51, 0x40, 0xb1, 0x28, 0x8c, 0x5b, 0x88,
		0x21, 0x60, 0xf2, 0x5f, 0x4a, 0x00, 0x9e, 0xc0, 0xde, 0x24, 0xd3, 0x23, 0x5b, 0x9c, 0x6f, 0xc8,
		0xee, 0xb7, 0x38, 0x3d, 0x6e, 0x63, 0xd8, 0x21, 0x31, 0xfd, 0x54, 0x82, 0x91, 0x0d, 0xa1, 0x9d,
		0x6f, 0xbe, 0x49, 0xcf, 0x41, 0x2f, 0xd6, 0x1d, 0x4b, 0xa3, 0xb3, 0xe6, 0xaf, 0x16, 0x7b, 0x8b,
		0x17, 0xc1, 0x38, 0xfd, 0x32, 0x84, 0x70, 0x35, 0x1c, 0x35, 0x34, 0xe5, 0x8f, 0xc4, 0x21, 0xdb,
		0x0a, 0x13, 0xcd, 0xc2, 0x50, 0xd9, 0xc2, 0xb4, 0xa1, 0xe4, 0x4f, 0x93, 0x0b, 0xb9, 0x3b, 0xb7,
		0x27, 0xc6, 0x18, 0xbf, 0x21, 0x00, 0x59, 0x19, 0x14, 0x2d, 0xdc, 0x8c, 0x54, 0x61, 0xa8, 0x6c,
		0xd4, 0xcd, 0x1a, 0xa6, 0x50, 0xd4, 0x8e, 0xc4, 0xda, 0xda, 0x11, 0x99, 0xdb, 0x11, 0x31, 0x48,
		0x90, 0x00, 0x33, 0x24, 0x83, 0x5e, 0x2b, 0xb5, 0x24, 0x2f, 0xc0, 0x90, 0xa6, 0x6b, 0x8e, 0xa6,
		0xd6, 0x4a, 0x9b, 0x6a, 0x4d, 0xd5, 0xcb, 0xdc, 0x0b, 0x16, 0xae, 0x76, 0x6d, 0x45, 0xf8, 0xb0,
		0x21, 0x72, 0xb2, 0x32, 0xc8, 0x5b, 0x0a, 0xac, 0x01, 0x5d, 0x85, 0x5e, 0x31, 0x54, 0xe2, 0xae,
		0x5c, 0x8d, 0x40, 0xf7, 0xb9, 0xcf, 0x5f, 0x97, 0x00, 0x79, 0x0b, 0xa1, 0x60, 0xdb, 0x34, 0x74,
		0x1b, 0xa3, 0xb7, 0x00, 0xf8, 0xcc, 0x23, 0x8b, 0x47, 0xc6, 0x82, 0x5e, 0x41, 0xf4, 0x8a, 0x7a,
		0x81, 0x07, 0x8f, 0x2e, 0x7a, 0x8c, 0xc6, 0x78, 0xf6, 0x13, 0x71, 0x44, 0x3e, 0x35, 0x6b, 0x68,
		0x02, 0xbb, 0x89, 0xb3, 0x7d, 0xf2, 0xf7, 0x93, 0xd0, 0xb3, 0xaa, 0x5a, 0x6a, 0xdd, 0x46, 0x67,
		0x01, 0x88, 0xce, 0x94, 0x7c, 0xc7, 0xdc, 0x85, 0xfd, 0x77, 0x6e, 0x4f, 0x0c, 0x33, 0xc1, 0x79,
		0x7d, 0xb2, 0x92, 0x26, 0x0f, 0x73, 0xf4, 0x04, 0xbc, 0x04, 0x83, 0x24, 0x74, 0x2a, 0x69, 0xfa,
		0x56, 0x8d, 0xcd, 0xa3, 0x2d, 0x33, 0x47, 0x82, 0x0e, 0x25, 0x88, 0x2e, 0x2b, 0x03, 0xa4, 0x61,
		0x41, 0x3c, 0xa3, 0x1d, 0x18, 0x20, 0x61, 0x75, 0x43, 0x27, 0x51, 0x8c, 0xa3, 0xde, 0xe0, 0x0a,
		0x70, 0xa5, 0x6b, 0x77, 0x3d, 0xea, 0xea, 0x9d, 0x47, 0x4c, 0x56, 0xfa, 0xdd, 0xe7, 0x75, 0xf5,
		0x06, 0x7a, 0x8e, 0x2a, 0x76, 0x5d, 0xb3, 0xf9, 0x67, 0x49, 0x9d, 0xbb, 0x51, 0x02, 0x62, 0x8c,
		0x06, 0x3d, 0x32, 0x8a, 0xea, 0x60, 0xb4, 0x02, 0x7d, 0x75, 0xd5, 0xda, 0xc1, 0x0e, 0x23, 0x9a,
		0xbc, 0x2b, 0xa2, 0xc0, 0x48, 0x50, 0x82, 0xe5, 0x26, 0x4f, 0xde, 0xc3, 0xe5, 0xde, 0xf4, 0x91,
		0x51, 0x1e, 0x8c, 0xb7, 0x71, 0xe4, 0x9f, 0x8c, 0x70, 0xe4, 0x8f, 0x41, 0xba, 0xae, 0xde, 0x28,
		0xd1, 0x88, 0x96, 0x46, 0x2d, 0x03, 0x85, 0xd1, 0x3b, 0xb7, 0x27, 0x32, 0x7c, 0xe1, 0x44, 0x97,
		0xac, 0xa4, 0xea, 0xea, 0x0d, 0xe2, 0x66, 0x6d, 0x74, 0x81, 0x4c, 0xf4, 0x46, 0x49, 0x18, 0xb5,
		0x14, 0x45, 0x1a, 0xbb, 0x73, 0x7b, 0x02, 0x79, 0x48, 0xbc, 0x53, 0x26, 0x13, 0xba, 0x51, 0x64,
		0x0f, 0x68, 0x11, 0xd0, 0xb6, 0x1b, 0xaa, 0xbb, 0xf8, 0x69, 0x8a, 0x7f, 0xe4, 0xce, 0xed, 0x89,
		0x83, 0x0c, 0xbf, 0x19, 0x46, 0x56, 0x86, 0xbd, 0x46, 0x4e, 0xcd, 0xb7, 0xf7, 0xfe, 0xb7, 0x04,
		0x89, 0x55, 0xc3, 0xa8, 0x21, 0x03, 0x86, 0x75, 0xc3, 0x29, 0x91, 0xf9, 0xe1, 0x4a, 0x89, 0x47,
		0x93, 0x4c, 0xcd, 0x67, 0xbb, 0xdb, 0xe2, 0x3f, 0xbe, 0x3d, 0xd1, 0x4c, 0x4a, 0x19, 0xd2, 0x0d,
		0xa7, 0x40, 0x5b, 0xd6, 0x59, 0xac, 0xf9, 0x6e, 0x18, 0x08, 0x0e, 0xc6, 0x1c, 0xc3, 0x73, 0x5d,
		0x0f, 0x16, 0x24, 0xe3, 0xa9, 0x72, 0xa0, 0x59, 0x56, 0xfa, 0x37, 0x7d, 0xa3, 0xb3, 0x73, 0xde,
		0x9f, 0x12, 0x09, 0xdc, 0x8c, 0xc1, 0x7e, 0xb2, 0x38, 0x5e, 0x26, 0xa4, 0xe0, 0xeb, 0xaa, 0x55,
		0xb1, 0xd1, 0x6f, 0x4a, 0x70, 0xa0, 0xdc, 0xa8, 0x37, 0x6a, 0xec, 0xf3, 0x0b, 0x16, 0x6d, 0x2e,
		0x51, 0x75, 0xe1, 0xb1, 0xc4, 0xe1, 0xc8, 0x6d, 0xcc, 0x2f, 0xc5, 0x14, 0x36, 0xb8, 0x46, 0x8d,
		0xf3, 0xad, 0x15, 0x4d, 0x4a, 0xfe, 0xd2, 0xf7, 0x27, 0x4e, 0x77, 0xa6, 0xe2, 0x84, 0xaa, 0xad,
		0xec, 0xf7, 0x08, 0x31, 0x4e, 0x15, 0x42, 0x86, 0xb8, 0x2e, 0x0b, 0x6f, 0x61, 0x8b, 0x56, 0xee,
		0xcb, 0xee, 0xad, 0x9b, 0x01, 0xbf, 0xeb, 0x0a, 0x01, 0xc8, 0xca, 0xa0, 0xdb, 0x32, 0x4b, 0x1b,
		0x3e, 0x45, 0x4d, 0xf1, 0x96, 0x36, 0xdb, 0xb0, 0x2c, 0xac, 0x3b, 0x42, 0x12, 0x3b, 0xd0, 0xcb,
		0x58, 0xb6, 0x3b, 0x9a, 0xf8, 0xe3, 0x64, 0xe2, 0xdd, 0x4e, 0x4b, 0x8c, 0x40, 0x3f, 0x89, 0x84,
		0x2d, 0xcd, 0xa8, 0xf0, 0xdb, 0x08, 0xfc, 0x89, 0xb8, 0x89, 0x31, 0xc2, 0xdb, 0x4a, 0xc3, 0xa1,
		0x9f, 0xa1, 0xd2, 0xf4, 0xaa, 0xe0, 0xef, 0x3d, 0xdd, 0xf1, 0x57, 0xe4, 0x0b, 0x33, 0x28, 0xa4,
		0x42, 0x51, 0xe5, 0xbb, 0xe5, 0x58, 0xfe, 0x15, 0x09, 0x0e, 0xd2, 0x30, 0xba, 0xcc, 0x97, 0x86,
		0x7d, 0xad, 0x81, 0x19, 0x38, 0xf4, 0x02, 0x80, 0x67, 0xee, 0xee, 0x9f, 0xfc, 0x7c, 0x83, 0xc8,
		0x7f, 0x23, 0x11, 0x9d, 0x16, 0x59, 0x96, 0xa3, 0x5a, 0x8e, 0xa6, 0x57, 0x69, 0x82, 0x3f, 0x0b,
		0x43, 0xa6, 0x85, 0xaf, 0x69, 0x46, 0xc3, 0x2e, 0x71, 0x29, 0xd3, 0x7b, 0x20, 0x7e, 0x2d, 0x09,
		0x01, 0xc8, 0xca, 0xa0, 0x68, 0x59, 0xa5, 0x0d, 0x68, 0x9d, 0x7e, 0x55, 0x73, 0x87, 0x5f, 0x34,
		0x29, 0x3c, 0xd5, 0xb5, 0xb3, 0xe9, 0xe7, 0xe9, 0x37, 0x21, 0x22, 0x2b, 0x8c, 0x18, 0x2a, 0x06,
		0x0e, 0x08, 0x13, 0x85, 0x47, 0x7e, 0x7c, 0x7b, 0x22, 0x1c, 0x8d, 0xed, 0x11, 0x85, 0x71, 0x64,
		0xf9, 0x0f, 0xe9, 0x62, 0x88, 0x38, 0xc0, 0x95, 0x02, 0x53, 0x95, 0xa6, 0x68, 0x54, 0xea, 0x22,
		0x1a, 0xd5, 0xa0, 0x87, 0xad, 0x38, 0xaf, 0x71, 0xdc, 0x87, 0x45, 0xe4, 0x03, 0xe4, 0x53, 0x3c,
		0x64, 0xa5, 0x89, 0x56, 0xef, 0x15, 0x8c, 0xa9, 0x8d, 0xfe, 0x98, 0x04, 0x83, 0x9e, 0x83, 0x36,
		0x0d, 0x7a, 0x0d, 0xa8, 0x3d, 0x27, 0x8b, 0x41, 0xcf, 0x16, 0xa4, 0xd0, 0xb5, 0xd6, 0x7b, 0xf1,
		0x06, 0xe1, 0xe9, 0xd4, 0xd7, 0x24, 0x00, 0xaf, 0x22, 0x81, 0x1e, 0x86, 0x03, 0x85, 0x95, 0xe5,
		0xb9, 0xd2, 0xda, 0xfa, 0xcc, 0xfa, 0xc6, 0x5a, 0x69, 0x63, 0x79, 0x6d, 0xb5, 0x38, 0xbb, 0x70,
		0x65, 0xa1, 0x38, 0xe7, 0x95, 0x19, 0x6d, 0x13, 0x97, 0xb5, 0x2d, 0x0d, 0x57, 0xd0, 0x71, 0x18,
		0x0d, 0x42, 0x93, 0xa7, 0xe2, 0x5c, 0x46, 0xca, 0xf5, 0xdf, 0xbc, 0x35, 0x99, 0x62, 0x61, 0x3a,
		0xae, 0xa0, 0x13, 0xb0, 0xbf, 0x19, 0x6e, 0x61, 0x79, 0x3e, 0x13, 0xcb, 0x0d, 0xdc, 0xbc, 0x35,
		0x99, 0x76, 0xe3, 0x79, 0x24, 0x03, 0xf2, 0x43, 0x72, 0x7a, 0xf1, 0x1c, 0xdc, 0xbc, 0x35, 0xd9,
		0xc3, 0xfc, 0x4f, 0x2e, 0xf1, 0xa1, 0xcf, 0x8f, 0xef, 0x2b, 0xfc, 0x42, 0xcb, 0x42, 0xa2, 0x5f,
		0x8f, 0x59, 0x3d, 0x90, 0xfd, 0x7b, 0xed, 0xec, 0xf4, 0x0d, 0x56, 0x1a, 0x0c, 0xd6, 0x0d, 0xbf,
		0x91, 0x85, 0x11, 0x5f, 0xdd, 0xd0, 0xb9, 0x11, 0x51, 0x35, 0xdc, 0xa3, 0x3e, 0xd8, 0xb6, 0xfe,
		0xd7, 0xa2, 0xe2, 0x78, 0xf7, 0x55, 0xc1, 0xe8, 0x2a, 0xa7, 0xfc, 0x89, 0x38, 0x0c, 0x2c, 0xd9,
		0xd5, 0x59, 0xb2, 0xb3, 0x30, 0xad, 0x67, 0x85, 0x2a, 0x33, 0x52, 0xd7, 0x95, 0x99, 0x16, 0xb5,
		0x8e, 0xd8, 0xeb, 0x52, 0xeb, 0x88, 0xce, 0x62, 0xe3, 0xf7, 0x24, 0x8b, 0x4d, 0x74, 0x61, 0x37,
		0xce, 0x89, 0x6b, 0xff, 0xc9, 0xce, 0x12, 0x11, 0xfe, 0x5e, 0x00, 0xb5, 0x01, 0x34, 0x0d, 0x39,
		0x00, 0xfb, 0x03, 0xeb, 0x22, 0x52, 0x24, 0xf9, 0xc3, 0x31, 0xe8, 0x5b, 0xb2, 0xab, 0xc5, 0x8a,
		0xe6, 0xdc, 0x9b, 0xf5, 0x3a, 0x17, 0x99, 0xac, 0x23, 0xcf, 0x57, 0x46, 0xcf, 0xf0, 0x46, 0xf4,
		0x32, 0xf3, 0x64, 0xf4, 0x7e, 0x96, 0xb3, 0x3c, 0x21, 0xed, 0x87, 0x11, 0x9f, 0x28, 0x5c, 0x11,
		0xfd, 0x07, 0x09, 0x86, 0x96, 0xec, 0x2a, 0x69, 0xe3, 0x68, 0xf8, 0xcd, 0x52, 0xdd, 0xb8, 0xe0,
		0x5e, 0x8f, 0x8e, 0x77, 0xa6, 0x18, 0xe2, 0xca, 0xb4, 0x37, 0xe9, 0x83, 0x70, 0x20, 0x34, 0x39,
		0x77, 0xe2, 0x7f, 0x2e, 0xc1, 0x30, 0xef, 0xdb, 0xd0, 0x2b, 0xff, 0xef, 0x4d, 0xfd, 0x79, 0x38,
		0xd8, 0x34, 0x3d, 0xb7, 0x76, 0xb0, 0xd4, 0x5c, 0x82, 0x91, 0xba, 0x38, 0x7f, 0x0e, 0x15, 0x5a,
		0xe4, 0xdf, 0x93, 0xe8, 0x60, 0x6b, 0x98, 0xea, 0xd6, 0x73, 0x9a, 0xb3, 0x5d, 0xb1, 0xd4, 0xeb,
		0x62, 0x32, 0xf7, 0x50, 0xa6, 0x57, 0x20, 0x73, 0x9d, 0x53, 0x0f, 0xc9, 0xd5, 0x57, 0xc9, 0x0e,
		0x43, 0xc8, 0xca, 0xd0, 0xf5, 0x20, 0x4b, 0x3e, 0x31, 0x1d, 0x83, 0xa3, 0x2d, 0x39, 0x77, 0x75,
		0xe5, 0xcb, 0x12, 0x8c, 0x2f, 0xd9, 0x55, 0xd1, 0xed, 0xd3, 0x27, 0x37, 0x70, 0x7a, 0x93, 0x54,
		0x79, 0xbd, 0x89, 0x9d, 0x80, 0xe3, 0x7b, 0xb3, 0xec, 0xce, 0x4e, 0xa5, 0x8b, 0xe7, 0x87, 0xf4,
		0x45, 0xe7, 0xaf, 0x21, 0x20, 0x6c, 0x92, 0x72, 0xf4, 0x10, 0x2e, 0x1f, 0x5f, 0x90, 0x20, 0xbb,
		0x64, 0x57, 0xaf, 0x34, 0xf4, 0x8a, 0x80, 0x70, 0xe3, 0x28, 0x54, 0x76, 0x77, 0x04, 0x0b, 0xe9,
		0xf6, 0xd8, 0x11, 0x8f, 0xf2, 0xc8, 0xf2, 0x44, 0x07, 0x46, 0x95, 0x87, 0x95, 0x8c, 0x34, 0x3a,
		0x0c, 0xe9, 0x0a, 0xa6, 0xdf, 0x18, 0xe4, 0x9f, 0xeb, 0x4d, 0x2b, 0x5e, 0x83, 0x6f, 0x3a, 0x32,
		0x4c, 0xb6, 0x62, 0x54, 0xcc, 0xe6, 0xcc, 0xdf, 0x24, 0x21, 0xbe, 0x64, 0x57, 0xd1, 0xd3, 0x00,
		0xbe, 0x88, 0xe1, 0xa0, 0xdf, 0xd9, 0x04, 0x9c, 0x56, 0xee, 0x68, 0xcb, 0x2e, 0x77, 0xdb, 0xce,
		0x41, 0xca, 0xf5, 0x65, 0x07, 0x42, 0xe0, 0xa2, 0x23, 0x37, 0xd1, 0xa2, 0xc3, 0xa5, 0xb2, 0x08,
		0x29, 0xd7, 0xd4, 0x1f, 0x0a, 0x01, 0xfb, 0x4d, 0x65, 0xee, 0xd8, 0x1e, 0x9d, 0x2e, 0x35, 0x05,
		0xc0, 0x67, 0x3f, 0x8f, 0x44, 0xa0, 0x78, 0xdd, 0xb9, 0x07, 0xf7, 0xec, 0x76, 0x69, 0x3e, 0x0f,
		0x88, 0x7e, 0x5d, 0x39, 0x68, 0x47, 0xc2, 0xc8, 0xd1, 0x9b, 0x36, 0xf7, 0x48, 0x47, 0x60, 0xee,
		0x58, 0xbb, 0x70, 0xc0, 0xd3, 0xcb, 0xe0, 0x9e, 0x3e, 0x15, 0xa2, 0xb4, 0xc7, 0x66, 0xca, 0x9d,
		0xe9, 0x1c, 0xd6, 0x1d, 0x5a, 0x87, 0xb1, 0x16, 0xbb, 0xee, 0xc1, 0x3d, 0xa8, 0x79, 0x60, 0x4d,
		0x53, 0xdd, 0x7b, 0x83, 0xa1, 0x2a, 0x0c, 0x13, 0x9d, 0x0d, 0x6e, 0xac, 0x07, 0x42, 0x34, 0x22,
		0xb5, 0x3a, 0xf7, 0x70, 0x27, 0x50, 0x62, 0xa0, 0x7b, 0x98, 0x3b, 0x7c, 0x75, 0x3f, 0x64, 0x7d,
		0xd1, 0x78, 0x15, 0xeb, 0xd8, 0xd6, 0xec, 0x8e, 0xaf, 0x1d, 0xdc, 0x65, 0xa4, 0xff, 0xbb, 0xfe,
		0xfa, 0x80, 0x10, 0x2a, 0xad, 0x0f, 0xbc, 0xa9, 0x7d, 0xd9, 0x07, 0x63, 0x70, 0x38, 0xba, 0x02,
		0xa4, 0xe0, 0xb2, 0xf1, 0x1a, 0xb3, 0xfb, 0xcf, 0x49, 0x30, 0x62, 0x78, 0x84, 0x4b, 0xa2, 0xa0,
		0xd4, 0x49, 0xae, 0xff, 0x56, 0x9e, 0x61, 0xf3, 0xe0, 0x35, 0x82, 0x4c, 0xd7, 0x69, 0x36, 0x32,
		0x9a, 0x26, 0xe9, 0x93, 0xc4, 0x1f, 0x4a, 0x30, 0xd1, 0xb2, 0xe2, 0x74, 0x0f, 0x84, 0x51, 0x86,
		0x3e, 0xd5, 0x23, 0xcd, 0x0f, 0x2d, 0x1e, 0x0c, 0xdf, 0xe9, 0x88, 0x1c, 0xbd, 0x90, 0xe3, 0xc2,
		0xe0, 0x25, 0x6d, 0x1f, 0x1d, 0x59, 0xf1, 0x53, 0xf5, 0x4d, 0xe7, 0xbb, 0x12, 0x1c, 0x8a, 0xac,
		0xc1, 0xde, 0x83, 0xa9, 0xb4, 0x28, 0x27, 0xa2, 0x35, 0xaf, 0x66, 0xe8, 0xfe, 0x52, 0x4b, 0x70,
		0x7a, 0x4d, 0xdc, 0x14, 0xc6, 0xa2, 0x0b, 0x87, 0x6e, 0x25, 0xd0, 0x37, 0xa5, 0xaf, 0x48, 0x90,
		0x6d, 0xae, 0xa4, 0xde, 0x83, 0xf9, 0xac, 0x7a, 0x7c, 0x8b, 0x4b, 0x82, 0x21, 0xbe, 0x83, 0x43,
		0x76, 0xc3, 0xf4, 0xc7, 0x63, 0x64, 0x1d, 0x22, 0xea, 0x86, 0x9c, 0xef, 0x37, 0x49, 0xf6, 0x50,
		0x81, 0x01, 0x9b, 0x33, 0xc7, 0x7e, 0xad, 0x30, 0x72, 0x01, 0x23, 0xa6, 0x51, 0x38, 0xcc, 0x65,
		0x31, 0xea, 0x16, 0x20, 0x3d, 0x2a, 0xb2, 0xd2, 0x6f, 0xfb, 0x60, 0x7d, 0x62, 0xf9, 0xfd, 0x34,
		0xf4, 0xcf, 0x33, 0xcb, 0xbc, 0xe6, 0x90, 0x28, 0xe0, 0x51, 0xe8, 0x31, 0xe9, 0xb1, 0x20, 0xcf,
		0x2a, 0x02, 0x77, 0x0a, 0xd8, 0x81, 0xa1, 0xfb, 0x96, 0x11, 0x3b, 0x3e, 0x7c, 0x18, 0x92, 0xec,
		0x9c, 0x68, 0xef, 0xeb, 0x51, 0x0c, 0x08, 0x3d, 0x45, 0xf2, 0x78, 0x91, 0xe3, 0x8a, 0xb3, 0xef,
		0xbd, 0xcf, 0x3e, 0xfd, 0x08, 0xe8, 0x45, 0xd8, 0xef, 0x9d, 0x5f, 0xf9, 0x29, 0xb1, 0xab, 0xd7,
		0x13, 0x6d, 0x4e, 0xd1, 0x0b, 0x0f, 0x70, 0x31, 0x1d, 0x0e, 0x9f, 0x85, 0xf9, 0x68, 0xc9, 0xca,
		0x68, 0xa3, 0x19, 0xd5, 0x46, 0xef, 0x97, 0x20, 0xeb, 0x69, 0x80, 0x6b, 0xdf, 0x89, 0x84, 0x6d,
		0xfe, 0x23, 0x86, 0xd1, 0x0b, 0xe5, 0xf7, 0x43, 0x85, 0x87, 0x38, 0x07, 0x13, 0x61, 0x95, 0x0a,
		0x12, 0x94, 0x95, 0xb1, 0x4a, 0x14, 0xbe, 0x8d, 0xde, 0x13, 0x6d, 0xcd, 0x7b, 0xc4, 0x77, 0xa4,
		0x83, 0xe2, 0x6f, 0xe5, 0x51, 0xdc, 0x63, 0xf9, 0x3d, 0x2c, 0x7b, 0x94, 0xa9, 0x46, 0x2f, 0x4b,
		0x70, 0x98, 0x69, 0xb0, 0x67, 0xf0, 0x4a, 0x5e, 0x85, 0xde, 0xe6, 0x3f, 0xf2, 0x79, 0xba, 0x23,
		0x93, 0xca, 0x79, 0x39, 0xcd, 0x79, 0x39, 0xe6, 0xdf, 0x20, 0xd1, 0xe4, 0x65, 0x25, 0x57, 0x69,
		0x45, 0xcd, 0x46, 0x1f, 0x94, 0xe0, 0x00, 0xc5, 0xf6, 0x1d, 0x17, 0x0a, 0x01, 0xa5, 0xc4, 0x2f,
		0x98, 0xb6, 0xb1, 0x85, 0x9c, 0xa7, 0xe3, 0xc1, 0x33, 0xae, 0x16, 0x54, 0x65, 0x65, 0x7f, 0x25,
		0xf2, 0x88, 0xed, 0x5d, 0x30, 0x4a, 0x51, 0xca, 0xcc, 0x64, 0xb9, 0x5c, 0xa4, 0x9b, 0x6f, 0x7b,
		0xb4, 0x32, 0xa6, 0x85, 0x63, 0x9c, 0x85, 0x43, 0x3e, 0x16, 0x42, 0xf4, 0x64, 0x05, 0x55, 0x9a,
		0x4f, 0xb5, 0x6e, 0x06, 0x34, 0x35, 0x60, 0x0b, 0x6c, 0xfa, 0xf3, 0x91, 0x4d, 0x72, 0x68, 0x69,
		0x19, 0x5b, 0xeb, 0x6b, 0x90, 0xac, 0x5f, 0x5f, 0xfd, 0x54, 0x6c, 0x34, 0x0f, 0xa9, 0x2d, 0x8c,
		0x59, 0x51, 0xbf, 0x8f, 0x1a, 0x95, 0x11, 0xff, 0xd8, 0xfc, 0x08, 0xa0, 0x70, 0x80, 0x8f, 0x33,
		0xc4, 0xc6, 0x11, 0x28, 0xb2, 0xd2, 0xbb, 0xc5, 0x0f, 0x09, 0xe8, 0x6f, 0x19, 0x9a, 0x86, 0x45,
		0xfc, 0x76, 0x3f, 0xff, 0x02, 0x2c, 0x7f, 0xbe, 0x87, 0x71, 0xeb, 0xbf, 0x8a, 0xc1, 0x29, 0x7f,
		0xec, 0xf9, 0x42, 0x03, 0x5b, 0xbb, 0x6e, 0x04, 0x6a, 0xaa, 0x55, 0x4d, 0xf7, 0x7f, 0x45, 0xe4,
		0xa0, 0x3f, 0x7a, 0xa2, 0xb0, 0x22, 0x86, 0x92, 0x75, 0xe8, 0x5b, 0x55, 0xab, 0x58, 0xc1, 0x2f,
		0x34, 0xb0, 0xed, 0x44, 0xbc, 0xa6, 0x3e, 0x06, 0x3d, 0xc6, 0xd6, 0x96, 0xb8, 0x14, 0x9f, 0x50,
		0xf8, 0x13, 0x1a, 0x85, 0x64, 0x4d, 0xab, 0x6b, 0xfc, 0xb8, 0x48, 0x61, 0x0f, 0x68, 0x02, 0xfa,
		0xe8, 0xd9, 0x66, 0x89, 0xbd, 0xe0, 0x97, 0x10, 0x9f, 0x90, 0x6c, 0xe8, 0xce, 0x3a, 0x69, 0x91,
		0x2f, 0x43, 0x3f, 0x1b, 0x8f, 0x27, 0x0d, 0x07, 0x21, 0x45, 0x5f, 0xc8, 0xf2, 0x46, 0xed, 0x25,
		0xcf, 0xcf, 0xb0, 0x57, 0xda, 0x19, 0x15, 0x36, 0x30, 0x7b, 0x28, 0x14, 0x5a, 0x0a, 0xb1, 0x83,
		0x84, 0x9c, 0x09, 0xca, 0x15, 0xe3, 0xb7, 0x92, 0xb0, 0x9f, 0x97, 0xff, 0x55, 0x53, 0x9b, 0xde,
		0x76, 0x1c, 0xd3, 0x8d, 0xfd, 0x59, 0x9d, 0x4a, 0x35, 0x35, 0x79, 0x17, 0x12, 0x57, 0x1d, 0xc7,
		0x44, 0xa7, 0x20, 0x69, 0x35, 0x6a, 0x58, 0x1c, 0x72, 0x8e, 0x4e, 0x79, 0x30, 0x53, 0x04, 0x40,
		0x69, 0xd4, 0xb0, 0xc2, 0x40, 0x50, 0x11, 0x26, 0xb6, 0x1a, 0xb5, 0xda, 0x6e, 0xa9, 0x82, 0xe9,
		0xaf, 0xfa, 0xba, 0x3f, 0xa0, 0x87, 0x6f, 0x98, 0xaa, 0xf8, 0x0a, 0x3f, 0x91, 0xcd, 0x61, 0x0a,
		0x36, 0x47, 0xa1, 0xc4, 0x8f, 0xe7, 0x15, 0x05, 0x8c, 0xfc, 0xa7, 0x31, 0x48, 0x09, 0xd2, 0xf4,
		0x1d, 0x73, 0x5c, 0xc3, 0x65, 0xc7, 0x10, 0x97, 0x74, 0xdd, 0x67, 0x84, 0x20, 0x5e, 0xe5, 0x4b,
		0x94, 0xbe, 0xba, 0x4f, 0x21, 0x0f, 0xa4, 0xcd, 0x7d, 0xf3, 0x9f, 0xb4, 0x99, 0x0d, 0xb2, 0x6a,
		0x09, 0xd3, 0xb0, 0xf9, 0x5d, 0xdc, 0xab, 0xfb, 0x14, 0xfa, 0x84, 0xb2, 0xd0, 0x43, 0xf6, 0x85,
		0xb8, 0xfb, 0x71, 0x75, 0x9f, 0xc2, 0x9f, 0xd1, 0x18, 0x24, 0x4d, 0xd5, 0x29, 0xb3, 0x97, 0xf2,
		0x48, 0x07, 0x7b, 0x44, 0x17, 0xa0, 0x87, 0x7d, 0x52, 0x2a, 0xfc, 0x93, 0x99, 0x44, 0x18, 0xec,
		0xdb, 0xdd, 0x84, 0xef, 0x55, 0xd5, 0x71, 0xb0, 0xa5, 0x13, 0x82, 0x0c, 0x1c, 0x21, 0x48, 0x6c,
		0x1a, 0x95, 0x5d, 0xfe, 0x33, 0x9e, 0xf4, 0x6f, 0xfe, 0x03, 0x83, 0x54, 0x1f, 0x4a, 0xb4, 0x93,
		0xfd, 0x7a, 0x71, 0xbf, 0x68, 0x2c, 0x10, 0xa0, 0x22, 0x8c, 0xa8, 0x95, 0x8a, 0x46, 0xb4, 0x5a,
		0xad, 0x95, 0x36, 0x35, 0x6a, 0xef, 0x6d, 0xfa, 0xdb, 0xd4, 0xad, 0xd6, 0x02, 0x79, 0x08, 0x05,
		0x0e, 0x5f, 0x48, 0x43, 0xaf, 0xc9, 0x98, 0x92, 0x2f, 0xc1, 0x70, 0x13, 0xa7, 0x84, 0xbf, 0x1d,
		0x4d, 0xaf, 0x88, 0xcf, 0x21, 0x90, 0xbf, 0x49, 0x1b, 0xfd, 0xfe, 0x3e, 0x2b, 0xd9, 0xd0, 0xbf,
		0x0b, 0xef, 0x6d, 0xfd, 0xe9, 0x98, 0x41, 0xdf, 0xa7, 0x63, 0x54, 0x53, 0x2b, 0xa4, 0x29, 0x7d,
		0xfe, 0xc1, 0x98, 0x19, 0xde, 0xc1, 0x3e, 0x16, 0x33, 0x65, 0x58, 0x55, 0x92, 0x75, 0x8a, 0xcc,
		0x92, 0x74, 0xa9, 0xa6, 0x66, 0x53, 0x75, 0xf4, 0x7e, 0x0f, 0xc0, 0xbe, 0xe4, 0xfb, 0x9b, 0x7e,
		0x46, 0x26, 0x31, 0x3f, 0xb3, 0xba, 0xe0, 0xea, 0xf1, 0xbf, 0x88, 0xc1, 0x61, 0x9f, 0x1e, 0xfb,
		0x80, 0x9b, 0xd5, 0x39, 0x17, 0xad, 0xf1, 0x1d, 0x7c, 0x3e, 0xe6, 0x19, 0x48, 0x10, 0x78, 0xd4,
		0xe6, 0xe7, 0xff, 0xb2, 0xbf, 0xfd, 0x9d, 0x7f, 0x26, 0x53, 0xa5, 0x88, 0x5e, 0x15, 0x4a, 0xa4,
		0xf0, 0x81, 0xce, 0xe5, 0x97, 0xf1, 0x7e, 0x0a, 0xc1, 0xbe, 0x77, 0x62, 0x0c, 0xcb, 0xf0, 0xbd,
		0x97, 0x61, 0xcc, 0x97, 0xae, 0x33, 0x2b, 0xd9, 0x5c, 0x08, 0xe8, 0xc2, 0xec, 0xb6, 0xfa, 0x52,
		0xc0, 0x5e, 0x2b, 0x75, 0xb7, 0x25, 0x05, 0x1b, 0x86, 0xdf, 0x4a, 0x98, 0xa1, 0xf7, 0x9c, 0x84,
		0x31, 0x1f, 0x73, 0xef, 0xb1, 0x4b, 0xfc, 0xe7, 0xc0, 0xc5, 0x7d, 0x75, 0xf0, 0x78, 0xe5, 0x69,
		0xcc, 0xf1, 0xa9, 0x96, 0x3e, 0x62, 0xca, 0xe7, 0x20, 0x14, 0x1f, 0xa6, 0xfc, 0x4b, 0x12, 0x20,
		0xff, 0xa8, 0xdc, 0xa4, 0xbb, 0xc1, 0xb6, 0xd4, 0x49, 0xb0, 0x3d, 0x1f, 0xc1, 0xcc, 0x43, 0x6d,
		0x99, 0x61, 0x43, 0x05, 0xb8, 0x39, 0x07, 0x19, 0x97, 0x19, 0x21, 0x81, 0xa3, 0x51, 0x99, 0x5e,
		0x20, 0x9b, 0x91, 0x2f, 0xfb, 0x24, 0xe7, 0x4e, 0xe1, 0x14, 0x24, 0x08, 0x0c, 0xcf, 0x2f, 0x5a,
		0xcd, 0x80, 0xc2, 0xc8, 0x1f, 0x92, 0xe0, 0x90, 0x4b, 0xc1, 0x17, 0x8a, 0x77, 0xce, 0xc3, 0x3d,
		0x5b, 0x90, 0x3f, 0x96, 0xe0, 0x70, 0x34, 0x2b, 0x6e, 0x49, 0x70, 0xd4, 0xcb, 0x21, 0x4a, 0xc2,
		0xbe, 0x8a, 0x95, 0x1a, 0x8f, 0x4e, 0x71, 0xdc, 0xba, 0xdb, 0x21, 0x5e, 0xf9, 0x1e, 0x69, 0xee,
		0xb3, 0x95, 0x91, 0x4a, 0x73, 0xe3, 0xbd, 0x5b, 0xdc, 0x8f, 0x49, 0xf0, 0x80, 0x3b, 0xb3, 0x88,
		0x9c, 0xe9, 0x8d, 0x90, 0xf6, 0xb7, 0x25, 0x78, 0xb0, 0x0d, 0x4f, 0x5c, 0xec, 0xcf, 0xc2, 0x88,
		0x97, 0xc4, 0x85, 0xa5, 0xde, 0x36, 0x1d, 0x64, 0xca, 0x86, 0x5c, 0x0a, 0xf7, 0x41, 0xbc, 0xf3,
		0x20, 0xbb, 0x33, 0x89, 0x4a, 0xc6, 0x3a, 0xde, 0x4d, 0x1a, 0x1c, 0xdb, 0x93, 0x10, 0x17, 0x48,
		0xc1, 0x7f, 0x63, 0x8c, 0x70, 0x2d, 0xb7, 0x4f, 0x09, 0xc5, 0x3d, 0x61, 0x91, 0x54, 0x5c, 0x86,
		0x9c, 0x3b, 0x94, 0x3f, 0x59, 0xeb, 0x98, 0xd7, 0xe7, 0x7d, 0xfb, 0x36, 0xa2, 0x9c, 0xfd, 0x4c,
		0xe8, 0xe2, 0x58, 0x17, 0x35, 0x38, 0x7e, 0x1f, 0xda, 0x77, 0x25, 0xcc, 0x82, 0x31, 0x3e, 0x96,
		0xb7, 0x49, 0x18, 0xa3, 0xa7, 0x5b, 0x16, 0x75, 0x22, 0xca, 0x36, 0x47, 0xa3, 0xca, 0x36, 0xad,
		0x4e, 0xc5, 0x9e, 0x87, 0x03, 0x4d, 0x63, 0xf2, 0xb9, 0xad, 0xc0, 0x48, 0x84, 0x1d, 0x70, 0xdf,
		0x9d, 0xdd, 0xd3, 0x0c, 0x90, 0x64, 0x2e, 0xdc, 0x26, 0xbf, 0x0b, 0x26, 0xe8, 0x58, 0x11, 0xfa,
		0x7b, 0xff, 0x27, 0xaa, 0xc2, 0x64, 0xeb, 0xc1, 0xf9, 0x8c, 0x9f, 0x84, 0x1e, 0xb6, 0x81, 0xf8,
		0x24, 0x3b, 0xdc, 0x75, 0x1c, 0x49, 0x7e, 0x45, 0xe2, 0x63, 0xb8, 0x59, 0x68, 0x84, 0xed, 0xe9,
		0x6a, 0x86, 0xf7, 0xc8, 0x0a, 0xf9, 0xc4, 0xf0, 0x2d, 0x09, 0x8e, 0xee, 0xc1, 0x23, 0x17, 0xc4,
		0x73, 0xaf, 0xc9, 0x05, 0x30, 0xa9, 0xdc, 0x5f, 0x5b, 0xff, 0x25, 0x09, 0x4e, 0x06, 0xe7, 0xb1,
		0x97, 0xc1, 0x7f, 0x83, 0x85, 0xfe, 0x6f, 0x24, 0x38, 0xd5, 0x09, 0xb3, 0xff, 0xb7, 0x78, 0x82,
		0x4f, 0x4b, 0xae, 0x59, 0x75, 0x95, 0xc8, 0x17, 0x52, 0xbe, 0xc1, 0xd2, 0xfe, 0xb8, 0x17, 0x6b,
		0x05, 0xb9, 0x7b, 0x63, 0x43, 0xcf, 0x06, 0x1c, 0x6c, 0xe6, 0xea, 0xfe, 0xdb, 0xbd, 0xab, 0x51,
		0x4b, 0x75, 0x57, 0x31, 0xec, 0x2e, 0x1c, 0x69, 0x72, 0x15, 0x01, 0xd7, 0x7f, 0xff, 0x26, 0xf1,
		0xcb, 0x12, 0x8c, 0xb7, 0x1a, 0x9b, 0xcf, 0xe4, 0xf5, 0xbc, 0xff, 0x2e, 0xff, 0xa2, 0x1b, 0x0a,
		0x09, 0x76, 0x68, 0xe1, 0xea, 0x35, 0xc8, 0xc3, 0x37, 0xd9, 0x7f, 0x27, 0xb9, 0xf1, 0x51, 0x34,
		0x75, 0x3e, 0xe3, 0x62, 0x78, 0xc6, 0x0f, 0x46, 0xdb, 0xe5, 0xd0, 0xd1, 0x7f, 0x28, 0x44, 0x42,
		0x55, 0xaf, 0x82, 0x76, 0x9f, 0xc4, 0xc6, 0xe8, 0xcb, 0x1b, 0x6e, 0xde, 0xe1, 0xdf, 0x96, 0xc5,
		0x1b, 0xaf, 0x51, 0x5c, 0x97, 0x83, 0x6a, 0xe9, 0x23, 0xcb, 0xe5, 0x34, 0xea, 0xdf, 0xef, 0x69,
		0xbe, 0xaf, 0x7d, 0x04, 0xde, 0xe9, 0x66, 0x0d, 0xa1, 0x53, 0x0a, 0xf7, 0x9a, 0xc6, 0x6b, 0xe2,
		0xef, 0xff, 0x73, 0x13, 0x80, 0x56, 0xe4, 0x39, 0x9f, 0x27, 0x23, 0x0e, 0xe3, 0x19, 0xf9, 0x3d,
		0xce, 0xdb, 0xcf, 0xf2, 0xed, 0x1d, 0xfc, 0x48, 0x80, 0x2f, 0xb9, 0x8f, 0xfa, 0x92, 0x90, 0xbc,
		0xc4, 0x2d, 0x64, 0x18, 0x8b, 0x73, 0x32, 0x05, 0x89, 0x6d, 0xcd, 0x76, 0xbc, 0xfb, 0x78, 0x9e,
		0x5a, 0x85, 0x30, 0x28, 0x9c, 0x8c, 0x78, 0x56, 0xcd, 0x2e, 0x60, 0xd0, 0xa1, 0xdd, 0x94, 0xd9,
		0x7f, 0x29, 0x83, 0x98, 0x1b, 0x7e, 0x25, 0xbe, 0xc9, 0xdc, 0xd0, 0xd2, 0x39, 0x37, 0x37, 0xb4,
		0x5c, 0x3e, 0xca, 0xeb, 0x06, 0xec, 0xac, 0x4e, 0x90, 0x9d, 0x87, 0x91, 0x40, 0x2b, 0x27, 0xdc,
		0xf5, 0x69, 0x9f, 0x7c, 0x88, 0x9b, 0xe3, 0xd0, 0xed, 0x11, 0x36, 0xca, 0xfb, 0x84, 0x83, 0x8b,
		0xbc, 0x5b, 0x82, 0xb0, 0x3b, 0x8d, 0xfb, 0xb4, 0x63, 0x28, 0xf9, 0x33, 0xdf, 0x39, 0x08, 0x49,
		0xca, 0x05, 0x52, 0x21, 0xc9, 0x5e, 0x4e, 0x0b, 0xdc, 0x6d, 0x6a, 0x2a, 0xe6, 0xe4, 0xc6, 0x5b,
		0x75, 0xf3, 0x08, 0xfc, 0xe0, 0x7b, 0xff, 0xe8, 0x87, 0xbf, 0x16, 0x1b, 0x41, 0xc3, 0xd3, 0xa1,
		0x0a, 0x91, 0x8d, 0xea, 0xfc, 0xfb, 0x08, 0x87, 0x23, 0x49, 0x88, 0x01, 0x8e, 0xb4, 0xe8, 0xe5,
		0xf4, 0x4f, 0x50, 0xfa, 0x32, 0x9a, 0x6c, 0xa2, 0x3f, 0xfd, 0x2e, 0xbf, 0xb5, 0x7f, 0x0f, 0x7a,
		0x59, 0x82, 0xa1, 0x50, 0x01, 0x02, 0x3d, 0x14, 0x49, 0xbc, 0x39, 0x9c, 0xcb, 0x9d, 0x68, 0x0f,
		0xc8, 0x19, 0x3a, 0x4b, 0x19, 0x9a, 0x42, 0x0f, 0xb7, 0x63, 0x68, 0xda, 0x7f, 0x36, 0xfb, 0xcf,
		0xf9, 0xc5, 0x80, 0xa8, 0x28, 0x0d, 0x3d, 0x1a, 0x39, 0xf8, 0x1e, 0xd1, 0x67, 0xee, 0xb1, 0x2e,
		0x30, 0x38, 0xdf, 0x4f, 0x51, 0xbe, 0x9f, 0x40, 0xe7, 0xdb, 0xf2, 0x1d, 0x79, 0xf0, 0x8b, 0x3e,
		0x21, 0xc1, 0x60, 0xe8, 0x3e, 0xd7, 0xf1, 0x48, 0x2e, 0x9a, 0x92, 0xe2, 0xdc, 0x43, 0x6d, 0xe1,
		0x38, 0x8f, 0x8f, 0x53, 0x1e, 0x1f, 0x41, 0xa7, 0xdb, 0xf2, 0xe8, 0xe5, 0xb8, 0xe8, 0xeb, 0xad,
		0xdf, 0x10, 0x9b, 0x8a, 0x1c, 0xb8, 0x65, 0xa5, 0x21, 0x37, 0xdd, 0x31, 0x3c, 0x67, 0xf8, 0x2d,
		0x94, 0xe1, 0xf3, 0xe8, 0x6c, 0x5b, 0x86, 0x23, 0xce, 0x90, 0xd1, 0xe7, 0xb9, 0x48, 0x7d, 0x2f,
		0x2f, 0xc8, 0x11, 0x1c, 0x84, 0x32, 0xda, 0xe0, 0x05, 0xc6, 0x16, 0xa9, 0xb6, 0x7c, 0x95, 0x72,
		0x56, 0x40, 0xbf, 0xd0, 0x8d, 0x9a, 0x92, 0xae, 0x90, 0x3b, 0x7a, 0x0f, 0xfa, 0x23, 0x09, 0x0e,
		0xb4, 0xd0, 0x2e, 0x74, 0xba, 0x89, 0x95, 0xd6, 0x99, 0x78, 0xf0, 0xb6, 0x5d, 0xbb, 0xcc, 0x59,
		0x7e, 0x27, 0x9d, 0xc0, 0x73, 0x68, 0xe3, 0xb5, 0x4e, 0x20, 0x52, 0x9f, 0xd1, 0x6f, 0xf1, 0x0d,
		0x19, 0x95, 0xb4, 0xa2, 0x87, 0x5b, 0x49, 0x38, 0x2a, 0xff, 0x0e, 0xde, 0x57, 0x6c, 0x9b, 0x09,
		0xb7, 0x52, 0xf2, 0xbd, 0x17, 0xe1, 0xcf, 0x24, 0x38, 0x1a, 0x60, 0x37, 0xd2, 0x90, 0x9c, 0x6b,
		0xcd, 0xc9, 0x5e, 0xd6, 0xe4, 0x7c, 0xb7, 0x68, 0x7b, 0xeb, 0x18, 0x47, 0xed, 0x7c, 0x31, 0x6c,
		0xf4, 0x69, 0xba, 0x13, 0xfc, 0xd1, 0x56, 0xa4, 0x71, 0x89, 0x48, 0x0d, 0x23, 0x8d, 0x4b, 0x54,
		0x92, 0x26, 0x3f, 0x41, 0xb9, 0x3d, 0x83, 0x1e, 0xed, 0x82, 0x5b, 0xe6, 0xc8, 0xbe, 0x20, 0xc1,
		0x40, 0x80, 0x68, 0xf0, 0x26, 0x6b, 0xcb, 0x1c, 0x2c, 0x77, 0xbc, 0x1d, 0x18, 0x67, 0x6d, 0x9e,
		0xb2, 0x36, 0x83, 0x2e, 0x77, 0xcb, 0x5a, 0xd8, 0x07, 0x7e, 0x43, 0x62, 0xaf, 0x35, 0x37, 0x25,
		0x35, 0xe8, 0xe4, 0x9e, 0x46, 0x23, 0x60, 0x05, 0x4f, 0x75, 0x02, 0xca, 0x39, 0x5f, 0xa0, 0x9c,
		0xcf, 0xa2, 0x99, 0x2e, 0x38, 0xe7, 0xe6, 0x2f, 0x82, 0xf7, 0x5c, 0x90, 0x77, 0x7f, 0x8e, 0x12,
		0x69, 0xcb, 0xf7, 0x48, 0x95, 0x22, 0x6d, 0xf9, 0x5e, 0xc9, 0x8f, 0x9c, 0xa7, 0x53, 0x39, 0x8b,
		0xce, 0x74, 0x3f, 0x15, 0xf4, 0x45, 0x09, 0x32, 0xe1, 0x6c, 0x01, 0x9d, 0x68, 0xa3, 0x99, 0x6e,
		0x9e, 0x92, 0x3b, 0xd9, 0x01, 0x24, 0xe7, 0xf2, 0x32, 0xe5, 0xf2, 0x22, 0xba, 0xd0, 0xb5, 0xaa,
		0xe0, 0x1b, 0xf4, 0xa4, 0xf9, 0xdb, 0x12, 0xbb, 0x4e, 0xdb, 0x2a, 0x79, 0x88, 0x8c, 0x46, 0xf6,
		0x4c, 0x63, 0x22, 0xa3, 0x91, 0xbd, 0x33, 0x13, 0x79, 0x96, 0x4e, 0xe3, 0x49, 0x74, 0xa9, 0x8b,
		0x69, 0x84, 0x53, 0x19, 0xf4, 0x59, 0xfe, 0xde, 0x7a, 0xe8, 0x73, 0x66, 0xcd, 0xbb, 0x2e, 0x32,
		0x95, 0x89, 0xb0, 0x1c, 0xd1, 0xc9, 0x8b, 0x7c, 0x81, 0x32, 0xfb, 0x18, 0x9a, 0x6e, 0xc1, 0xac,
		0xef, 0xea, 0x93, 0xa6, 0x6f, 0x19, 0xd3, 0xef, 0x62, 0x39, 0xd1, 0x7b, 0x50, 0x0d, 0x52, 0x84,
		0x3f, 0x7a, 0x43, 0xa7, 0x39, 0x0a, 0xf6, 0xa5, 0x07, 0x11, 0x51, 0xb0, 0x3f, 0x3d, 0x90, 0x8f,
		0x51, 0x0e, 0x8e, 0xa0, 0x43, 0x2d, 0x38, 0x20, 0xc1, 0x3d, 0xc2, 0xee, 0x67, 0x4b, 0x9a, 0x83,
		0xf6, 0x40, 0xca, 0x13, 0x7c, 0x99, 0x22, 0x22, 0xf9, 0x91, 0x73, 0x74, 0xbc, 0x51, 0x84, 0xfc,
		0xe3, 0xf1, 0x4b, 0x8d, 0x1f, 0x90, 0x60, 0xb8, 0xf9, 0x4d, 0x96, 0x66, 0x8b, 0x18, 0x95, 0x06,
		0x45, 0x58, 0xc4, 0xc8, 0x7c, 0x48, 0x96, 0x29, 0x03, 0x87, 0x51, 0xce, 0xcf, 0x40, 0xf0, 0x1d,
		0xe6, 0x7b, 0x77, 0xaf, 0xe9, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x8d, 0x01, 0xb7, 0x95,
		0x9d, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Description) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Description)
	if !ok {
		that2, ok := that.(Description)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Moniker != that1.Moniker {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.SecurityContact != that1.SecurityContact {
		return false
	}
	if this.Details != that1.Details {
		return false
	}
	return true
}
func (this *UnbondingDelegationEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnbondingDelegationEntry)
	if !ok {
		that2, ok := that.(UnbondingDelegationEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreationHeight != that1.CreationHeight {
		return false
	}
	if !this.CompletionTime.Equal(that1.CompletionTime) {
		return false
	}
	if !this.InitialBalance.Equal(that1.InitialBalance) {
		return false
	}
	if !this.Balance.Equal(that1.Balance) {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BondDenom != that1.BondDenom {
		return false
	}
	if !this.MintInflation.Equal(&that1.MintInflation) {
		return false
	}
	if !this.CommunityTax.Equal(that1.CommunityTax) {
		return false
	}
	if !this.CommissionRate.Equal(that1.CommissionRate) {
		return false
	}
	if !this.MarketRate.Equal(that1.MarketRate) {
		return false
	}
	if this.UnbondingTime != that1.UnbondingTime {
		return false
	}
	if this.MaxDefis != that1.MaxDefis {
		return false
	}
	if this.MaxEntries != that1.MaxEntries {
		return false
	}
	if this.HistoricalEntries != that1.HistoricalEntries {
		return false
	}
	return true
}
func (this *Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotBondedTokens.Equal(that1.NotBondedTokens) {
		return false
	}
	if !this.BondedTokens.Equal(that1.BondedTokens) {
		return false
	}
	return true
}
func (m *HistoricalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Defiset) > 0 {
		for iNdEx := len(m.Defiset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Defiset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDefi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Defi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Defi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Defi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinSelfDelegation.Size()
		i -= size
		if _, err := m.MinSelfDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintDefi(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	if m.UnbondingHeight != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.UnbondingHeight))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.DelegatorShares.Size()
		i -= size
		if _, err := m.DelegatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Status != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DefiAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefiAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefiAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintDefi(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DDPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DDPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefiAddress) > 0 {
		i -= len(m.DefiAddress)
		copy(dAtA[i:], m.DefiAddress)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.DefiAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DDPairs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DDPairs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DDPairs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for iNdEx := len(m.Pairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDefi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Delegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DefiAddress) > 0 {
		i -= len(m.DefiAddress)
		copy(dAtA[i:], m.DefiAddress)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.DefiAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDefi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DefiAddress) > 0 {
		i -= len(m.DefiAddress)
		copy(dAtA[i:], m.DefiAddress)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.DefiAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingDelegationEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingDelegationEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingDelegationEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.InitialBalance.Size()
		i -= size
		if _, err := m.InitialBalance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintDefi(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if m.CreationHeight != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HistoricalEntries != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.HistoricalEntries))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxEntries != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.MaxEntries))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxDefis != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.MaxDefis))
		i--
		dAtA[i] = 0x38
	}
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.UnbondingTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintDefi(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x32
	{
		size := m.MarketRate.Size()
		i -= size
		if _, err := m.MarketRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CommunityTax.Size()
		i -= size
		if _, err := m.CommunityTax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.MintInflation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BondedTokens.Size()
		i -= size
		if _, err := m.BondedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.NotBondedTokens.Size()
		i -= size
		if _, err := m.NotBondedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DefiHistoricalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefiHistoricalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefiHistoricalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReferenceCount != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.ReferenceCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CumulativeRewardRatio) > 0 {
		for iNdEx := len(m.CumulativeRewardRatio) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeRewardRatio[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDefi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefiCurrentRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefiCurrentRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefiCurrentRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDefi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefiOutstandingRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefiOutstandingRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefiOutstandingRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDefi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DefiAccumulatedCommission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefiAccumulatedCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefiAccumulatedCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commission) > 0 {
		for iNdEx := len(m.Commission) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commission[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDefi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorStartingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorStartingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorStartingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Stake.Size()
		i -= size
		if _, err := m.Stake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDefi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PreviousPeriod != 0 {
		i = encodeVarintDefi(dAtA, i, uint64(m.PreviousPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationDelegatorReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationDelegatorReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationDelegatorReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDefi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DefiAddress) > 0 {
		i -= len(m.DefiAddress)
		copy(dAtA[i:], m.DefiAddress)
		i = encodeVarintDefi(dAtA, i, uint64(len(m.DefiAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommunityPool) > 0 {
		for iNdEx := len(m.CommunityPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommunityPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDefi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDefi(dAtA []byte, offset int, v uint64) int {
	offset -= sovDefi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HistoricalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovDefi(uint64(l))
	if len(m.Defiset) > 0 {
		for _, e := range m.Defiset {
			l = e.Size()
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	return n
}

func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	return n
}

func (m *Defi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDefi(uint64(m.Status))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovDefi(uint64(l))
	l = m.DelegatorShares.Size()
	n += 1 + l + sovDefi(uint64(l))
	l = m.Description.Size()
	n += 1 + l + sovDefi(uint64(l))
	if m.UnbondingHeight != 0 {
		n += 1 + sovDefi(uint64(m.UnbondingHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UnbondingTime)
	n += 1 + l + sovDefi(uint64(l))
	l = m.MinSelfDelegation.Size()
	n += 1 + l + sovDefi(uint64(l))
	return n
}

func (m *DefiAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	return n
}

func (m *DDPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	l = len(m.DefiAddress)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	return n
}

func (m *DDPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pairs) > 0 {
		for _, e := range m.Pairs {
			l = e.Size()
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	return n
}

func (m *Delegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	l = len(m.DefiAddress)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovDefi(uint64(l))
	return n
}

func (m *UnbondingDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	l = len(m.DefiAddress)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	return n
}

func (m *UnbondingDelegationEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovDefi(uint64(m.CreationHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovDefi(uint64(l))
	l = m.InitialBalance.Size()
	n += 1 + l + sovDefi(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovDefi(uint64(l))
	return n
}

func (m *DelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovDefi(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovDefi(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	l = m.MintInflation.Size()
	n += 1 + l + sovDefi(uint64(l))
	l = m.CommunityTax.Size()
	n += 1 + l + sovDefi(uint64(l))
	l = m.CommissionRate.Size()
	n += 1 + l + sovDefi(uint64(l))
	l = m.MarketRate.Size()
	n += 1 + l + sovDefi(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.UnbondingTime)
	n += 1 + l + sovDefi(uint64(l))
	if m.MaxDefis != 0 {
		n += 1 + sovDefi(uint64(m.MaxDefis))
	}
	if m.MaxEntries != 0 {
		n += 1 + sovDefi(uint64(m.MaxEntries))
	}
	if m.HistoricalEntries != 0 {
		n += 1 + sovDefi(uint64(m.HistoricalEntries))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NotBondedTokens.Size()
	n += 1 + l + sovDefi(uint64(l))
	l = m.BondedTokens.Size()
	n += 1 + l + sovDefi(uint64(l))
	return n
}

func (m *DefiHistoricalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeRewardRatio) > 0 {
		for _, e := range m.CumulativeRewardRatio {
			l = e.Size()
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	if m.ReferenceCount != 0 {
		n += 1 + sovDefi(uint64(m.ReferenceCount))
	}
	return n
}

func (m *DefiCurrentRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	if m.Period != 0 {
		n += 1 + sovDefi(uint64(m.Period))
	}
	return n
}

func (m *DefiOutstandingRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	return n
}

func (m *DefiAccumulatedCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commission) > 0 {
		for _, e := range m.Commission {
			l = e.Size()
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	return n
}

func (m *DelegatorStartingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreviousPeriod != 0 {
		n += 1 + sovDefi(uint64(m.PreviousPeriod))
	}
	l = m.Stake.Size()
	n += 1 + l + sovDefi(uint64(l))
	if m.Height != 0 {
		n += 1 + sovDefi(uint64(m.Height))
	}
	return n
}

func (m *DelegationDelegatorReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DefiAddress)
	if l > 0 {
		n += 1 + l + sovDefi(uint64(l))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	return n
}

func (m *FeePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommunityPool) > 0 {
		for _, e := range m.CommunityPool {
			l = e.Size()
			n += 1 + l + sovDefi(uint64(l))
		}
	}
	return n
}

func sovDefi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDefi(x uint64) (n int) {
	return sovDefi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DefiAddresses) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefiAddresses{`,
		`Addresses:` + fmt.Sprintf("%v", this.Addresses) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringDefi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HistoricalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defiset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defiset = append(m.Defiset, Defi{})
			if err := m.Defiset[len(m.Defiset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Defi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Defi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Defi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
			}
			m.UnbondingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefiAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefiAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefiAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DDPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DDPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DDPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DDPairs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DDPairs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DDPairs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pairs = append(m.Pairs, DDPair{})
			if err := m.Pairs[len(m.Pairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, UnbondingDelegationEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingDelegationEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingDelegationEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingDelegationEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBalance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintInflation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintInflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityTax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommunityTax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarketRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDefis", wireType)
			}
			m.MaxDefis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDefis |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntries", wireType)
			}
			m.MaxEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			m.HistoricalEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoricalEntries |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBondedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NotBondedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefiHistoricalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefiHistoricalRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefiHistoricalRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardRatio = append(m.CumulativeRewardRatio, types1.DecCoin{})
			if err := m.CumulativeRewardRatio[len(m.CumulativeRewardRatio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceCount", wireType)
			}
			m.ReferenceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferenceCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefiCurrentRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefiCurrentRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefiCurrentRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types1.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefiOutstandingRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefiOutstandingRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefiOutstandingRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types1.DecCoin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefiAccumulatedCommission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefiAccumulatedCommission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefiAccumulatedCommission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commission = append(m.Commission, types1.DecCoin{})
			if err := m.Commission[len(m.Commission)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorStartingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorStartingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorStartingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousPeriod", wireType)
			}
			m.PreviousPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationDelegatorReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationDelegatorReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationDelegatorReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefiAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefiAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types1.DecCoin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDefi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDefi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunityPool = append(m.CommunityPool, types1.DecCoin{})
			if err := m.CommunityPool[len(m.CommunityPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDefi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDefi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDefi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDefi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDefi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDefi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDefi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDefi = fmt.Errorf("proto: unexpected end of group")
)
